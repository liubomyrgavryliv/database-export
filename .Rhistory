plain_ions('Z') %>%
select(Id, A, B, C, D, E, F, X1, X2, X3, Y1, Y2, Y3, V, W, Z)
View(data)
output <-
data %>%
unite(ions, c(A, B, C, D, E, F, X1, X2, X3, Y1, Y2, Y3, V, W, Z), sep = ', ')
View(output)
output <-
data %>%
unite(ions, c(A, B, C, D, E, F, X1, X2, X3, Y1, Y2, Y3, V, W, Z), sep = ', ', na.rm=TRUE)
View(output)
output <-
data %>%
unite(ions, c(A, B, C, D, E, F, X1, X2, X3, Y1, Y2, Y3, V, W, Z), sep = ', ', na.rm=TRUE) %>%
mutate_all(str_split(Cation, ', ')) %>%
unchop(ions, keep_empty = FALSE) %>%
distinct(ions) %>%
arrange(ions)
output <-
data %>%
unite(ions, c(A, B, C, D, E, F, X1, X2, X3, Y1, Y2, Y3, V, W, Z), sep = ', ', na.rm=TRUE) %>%
mutate_all(str_split(ions, ', ')) %>%
unchop(ions, keep_empty = FALSE) %>%
distinct(ions) %>%
arrange(ions)
output <-
data %>%
unite(ions, c(A, B, C, D, E, F, X1, X2, X3, Y1, Y2, Y3, V, W, Z), sep = ', ', na.rm=TRUE) %>%
mutate(ions=str_split(ions, ', ')) %>%
unchop(ions, keep_empty = FALSE) %>%
distinct(ions) %>%
arrange(ions)
View(output)
View(output)
View(data)
View(output)
# check errors -------------------------------
check <- data %>%
anti_join(ions, by=c('ions'='Ion'))
View(output)
check <- output %>%
anti_join(ions, by=c('ions'='Ion'))
View(check)
View(output)
output <-
data %>%
unite(ions, c(X1, X2, X3, Y1, Y2, Y3, V, W, Z), sep = ', ', na.rm=TRUE) %>%
mutate(ions=str_split(ions, ', ')) %>%
unchop(ions, keep_empty = FALSE) %>%
distinct(ions) %>%
arrange(ions)
# check errors -------------------------------
check <- output %>%
anti_join(ions, by=c('ions'='Ion'))
View(check)
output <-
data %>%
unite(ions, c(A, B, C, D, E, F, X1, X2, X3, Y1, Y2, Y3, V, W, Z), sep = ', ', na.rm=TRUE) %>%
mutate(ions=str_split(ions, ', ')) %>%
unchop(ions, keep_empty = FALSE) %>%
distinct(ions) %>%
arrange(ions)
# check errors -------------------------------
check <- output %>%
anti_join(ions, by=c('ions'='Ion'))
View(check)
output <-
initial %>%
select(!c('Supergroup','Group','Subgroup','Aliases','Series','Chemical_label',
'Structural_label','Minerals_Names','Note','Index','Relation_name','Formulae')) %>%
unite(ions, matches('[A-Z]-?[a-z]?'), sep=', ', na.rm = TRUE)
View(output)
output <-
initial %>%
select(!c('Supergroup','Group','Subgroup','Aliases','Series','Chemical_label',
'Structural_label','Minerals_Names','Note','Index','Relation_name','Formulae')) %>%
unite(ions, matches('[^[Cc]harge] [A-Z]-?[a-z]?'), sep=', ', na.rm = TRUE)
output <-
initial %>%
select(!c('Supergroup','Group','Subgroup','Aliases','Series','Chemical_label',
'Structural_label','Minerals_Names','Note','Index','Relation_name','Formulae')) %>%
unite(ions, matches('[^[Cc]harge] [A-Z]-?[a-z]?'), sep=', ', na.rm = TRUE)
output <-
initial %>%
select(!c('Supergroup','Group','Subgroup','Aliases','Series','Chemical_label',
'Structural_label','Minerals_Names','Note','Index','Relation_name','Formulae')) %>%
select(!contains('Charge'))
View(output)
output <-
initial %>%
select(!c('Supergroup','Group','Subgroup','Aliases','Series','Chemical_label',
'Structural_label','Minerals_Names','Note','Index','Relation_name','Formulae')) %>%
select(!contains('Charge')) %>%
unite(ions, matches('.*'), sep=', ', na.rm = TRUE)
View(output)
output <-
initial %>%
select(!c('Supergroup','Group','Subgroup','Aliases','Series','Chemical_label',
'Structural_label','Minerals_Names','Note','Index','Relation_name','Formulae')) %>%
select(!contains('Charge', 'Index')) %>%
unite(ions, matches('.*'), sep=', ', na.rm = TRUE)
output <-
initial %>%
select(!c('Supergroup','Group','Subgroup','Aliases','Series','Chemical_label',
'Structural_label','Minerals_Names','Note','Index','Relation_name','Formulae')) %>%
select(!contains('Charge', 'Index'))
output <-
initial %>%
select(!c('Supergroup','Group','Subgroup','Aliases','Series','Chemical_label',
'Structural_label','Minerals_Names','Note','Index','Relation_name','Formulae')) %>%
select(!contains(c('Charge', 'Index'))) %>%
unite(ions, matches('.*'), sep=', ', na.rm = TRUE)
View(output)
output <-
initial %>%
select(!c('Supergroup','Group','Subgroup','Aliases','Series','Chemical_label',
'Structural_label','Minerals_Names','Note','Index','Relation_name','Formulae')) %>%
select(!contains(c('Charge', 'Index'))) %>%
unite(ions, matches('.*'), sep=', ', na.rm = TRUE) %>%
mutate(ions=str_split(ions, ', ')) %>%
unchop(ions, keep_empty = FALSE) %>%
distinct(ions) %>%
arrange(ions)
View(output)
initial <- googlesheets4::read_sheet(
ss='1Wo6n1xggXkITCCApdt_tLsNHOKMxyOgsMqSVpRecYsE',
sheet = 'Groups_formulae_table',
range = 'B:GB',
col_names = TRUE,
col_types = 'c',
na = ""
)
# Use only ions columns, omit charge and index
output <-
initial %>%
select(!c('Supergroup','Group','Subgroup','Aliases','Series','Chemical_label',
'Structural_label','Minerals_Names','Note','Index','Relation_name','Formulae')) %>%
select(!contains(c('Charge', 'Index'))) %>%
unite(ions, matches('.*'), sep=', ', na.rm = TRUE) %>%
mutate(ions=str_split(ions, ', ')) %>%
unchop(ions, keep_empty = FALSE) %>%
distinct(ions) %>%
arrange(ions)
View(output)
# check errors -------------------------------
check <- output %>%
anti_join(ions, by=c('ions'='Ion'))
View(check)
output <-
data %>%
unite(ions, c(A, B, C, D, E, F, X1, X2, X3, Y1, Y2, Y3, V, W, Z), sep = ', ', na.rm=TRUE) %>%
mutate(ions=str_split(ions, ', ')) %>%
unchop(ions, keep_empty = FALSE) %>%
distinct(ions) %>%
arrange(ions)
View(output)
# check errors -------------------------------
check <- output %>%
anti_join(ions, by=c('ions'='Ion'))
View(check)
cations <-
data %>%
unite(ions, c(A, B, C, D, E, F, X1, X2, X3), sep = ', ', na.rm=TRUE) %>%
mutate(ions=str_split(ions, ', ')) %>%
unchop(ions, keep_empty = FALSE) %>%
distinct(ions) %>%
arrange(ions)
View(cations)
# check errors -------------------------------
check <- output %>%
anti_join(ions, by=c('ions'='Ion'))
View(check)
# read Groups data ------------------------------------------------------------
cations <- googlesheets4::read_sheet(
ss='1FCu3ywv1wVMP6IZjwFezjipXXC74S8hRbLZaNzZCWpg',
sheet = 'Cations',
range = 'A:H',
col_names = TRUE,
col_types = 'c',
na = ""
)
cations_groups <-
data %>%
unite(ions, c(A, B, C, D, E, F, X1, X2, X3), sep = ', ', na.rm=TRUE) %>%
mutate(ions=str_split(ions, ', ')) %>%
unchop(ions, keep_empty = FALSE) %>%
distinct(ions) %>%
arrange(ions)
# check errors -------------------------------
cations <- cations %>%
select(Ion, `Ion (oxidation states)`)
check <- output %>%
anti_join(cations, by=c('ions'='Ion'))
check <- output %>%
anti_join(cations_groups, by=c('ions'='Ion'))
check <- cations_groups %>%
anti_join(cations, by=c('ions'='Ion'))
View(check)
check <- cations_groups %>%
anti_join(cations, by=c('ions'='Ion (oxidation states)'))
View(check)
View(check)
initial <- googlesheets4::read_sheet(
ss='1Wo6n1xggXkITCCApdt_tLsNHOKMxyOgsMqSVpRecYsE',
sheet = 'Groups_formulae_table',
range = 'B:GB',
col_names = TRUE,
col_types = 'c',
na = ""
)
# concat ion columns with charges
data <- initial %>%
select(!c('Supergroup','Group','Subgroup','Aliases','Series','Chemical_label',
'Structural_label','Minerals_Names','Note','Index','Relation_name','Formulae')) %>%
mutate(Id = 1:nrow(initial)) %>%
plain_ions('A') %>%
plain_ions('B') %>%
plain_ions('C') %>%
plain_ions('D') %>%
plain_ions('E') %>%
plain_ions('F') %>%
plain_ions('X1') %>%
plain_ions('X2') %>%
plain_ions('X3') %>%
plain_ions('Y1') %>%
plain_ions('Y2') %>%
plain_ions('Y3') %>%
plain_ions('V') %>%
plain_ions('W') %>%
plain_ions('Z') %>%
select(Id, A, B, C, D, E, F, X1, X2, X3, Y1, Y2, Y3, V, W, Z)
cations_groups <-
data %>%
unite(ions, c(A, B, C, D, E, F, X1, X2, X3), sep = ', ', na.rm=TRUE) %>%
mutate(ions=str_split(ions, ', ')) %>%
unchop(ions, keep_empty = FALSE) %>%
distinct(ions) %>%
arrange(ions)
View(cations_groups)
# check errors -------------------------------
cations <- cations %>%
select(Ion, `Ion (oxidation states)`)
check <- cations_groups %>%
anti_join(cations, by=c('ions'='Ion (oxidation states)'))
check <- cations_groups %>%
anti_join(cations, by=c('ions'='Ion'))
View(data)
View(check)
check_oxidation_state <- cations_groups %>%
anti_join(cations, by=c('ions'='Ion (oxidation states)'))
check_plain <- cations_groups %>%
anti_join(cations, by=c('ions'='Ion'))
View(check_oxidation_state)
View(check_plain)
View(check_oxidation_state)
View(check_plain)
check <- cations_groups %>%
anti_join(cations, by=c('ions'='Ion (oxidation states)'))
View(check)
# concat ion columns with charges
data <- initial %>%
# select(!c('Supergroup','Group','Subgroup','Aliases','Series','Chemical_label',
#           'Structural_label','Minerals_Names','Note','Index','Relation_name','Formulae')) %>%
mutate(Id = 1:nrow(initial)) %>%
plain_ions('A') %>%
plain_ions('B') %>%
plain_ions('C') %>%
plain_ions('D') %>%
plain_ions('E') %>%
plain_ions('F') %>%
plain_ions('X1') %>%
plain_ions('X2') %>%
plain_ions('X3') %>%
plain_ions('Y1') %>%
plain_ions('Y2') %>%
plain_ions('Y3') %>%
plain_ions('V') %>%
plain_ions('W') %>%
plain_ions('Z') %>%
select(Id, A, B, C, D, E, F, X1, X2, X3, Y1, Y2, Y3, V, W, Z)
View(data)
groups_ions_to_json <- function (input, formula_table, type) {
formula_table <- formula_table %>%
filter(type == !!type)
input <- input %>%
left_join(formula_table) %>%
distinct(Name, .keep_all = TRUE) %>%
nest(ions=c(A,B,C,D,E,F,X1,X2,X3,Y1,Y2,Y3,V,W,Z)) %>%
select(Name, Formulae, ions, Note) %>%
distinct(Name, .keep_all = TRUE) %>%
mutate(ions = map(ions, function(x) discard(x, .p = is.na))) %>%
mutate(ions = map(ions, function(x) {
if (length(x) > 0) {
positions = names(x)
ions_arr = str_split(x, ', ')
names(ions_arr) <- positions
return(jsonlite::toJSON(ions_arr))
} else {
return(NULL)
}
})) %>%
mutate(ions = as.character(ions)) %>%
na_if(., 'NULL')
return(input)
}
merge_ions = function(input, column_name){
temp <- input %>%
select(Name, type, Formulae, Note, !matches(ifelse(str_detect(column_name, 'X1|X2|X3|Y1|Y2|Y3'), column_name, paste0(column_name,'[0-9]'))))
input <- input %>%
select(!type) %>%
select(Name, matches(ifelse(str_detect(column_name, 'X1|X2|X3|Y1|Y2|Y3'), column_name, paste0(column_name,'[0-9]')))) %>%
mutate_at(vars(!contains(c('Index', 'Charge', 'Name'))), .funs = function(x){ str_split(x, ', ') }) %>%
unchop(cols = !contains(c('Index', 'Charge', 'Name'))) %>%
rowwise() %>%
mutate_at(vars(!contains(c('Index', 'Charge', 'Name'))), .funs = function(x) {
colname = quo_name(enquo(x))
ion = str_extract(colname, '[A-Z][0-9]-?[a-z]?')
output = list(
c_across(contains(ion))
)
cation = ifelse(is.na(output[[1]][1]), '', output[[1]][1])
charge = output[[1]][2]
index = output[[1]][3]
charge = ifelse(str_detect(cation, '\\^') || is.na(charge) || cation == '[box]', '', paste0('^',charge,'^'))
index = ifelse(index == 1 || is.na(index) || cation == '[box]', '', paste0(' x ', index))
ions_cell = paste0(cation, charge, index)
return(ifelse(ions_cell == '', NA, ions_cell))
}) %>%
select(!contains(c('Index', 'Charge'))) %>%
unite(col = !!column_name, !contains(c('Name')), na.rm = TRUE, sep = ', ') %>%
group_by(Name) %>%
summarise(across(!!column_name, function(x) {
ions = unlist(unique(str_split(x, ', ')))
return(paste0(ions, collapse = ', '))
})) %>%
distinct(Name, .keep_all = TRUE) %>%
mutate_all(list(~na_if(.,""))) %>%
ungroup() %>%
select(Name, !!column_name) %>%
left_join(temp, by = 'Name')
rm(temp)
print(paste0(column_name,' has been processed!'))
return(input)
}
plain_ions = function(input, column_name){
temp <- input %>%
select(!matches(ifelse(str_detect(column_name, 'X1|X2|X3|Y1|Y2|Y3'), column_name, paste0(column_name,'[0-9]'))))
input <- input %>%
select(Id, matches(ifelse(str_detect(column_name, 'X1|X2|X3|Y1|Y2|Y3'), column_name, paste0(column_name,'[0-9]')))) %>%
mutate_at(vars(!contains(c('Index', 'Charge', 'Id'))), .funs = function(x){ str_split(x, ', ') }) %>%
unchop(cols = !contains(c('Index', 'Charge', 'Id'))) %>%
rowwise() %>%
mutate_at(vars(!contains(c('Index', 'Charge', 'Id'))), .funs = function(x) {
colname = quo_name(enquo(x))
ion = str_extract(colname, '[A-Z][0-9]-?[a-z]?')
output = list(
c_across(contains(ion))
)
cation = ifelse(is.na(output[[1]][1]), '', output[[1]][1])
charge = output[[1]][2]
index = output[[1]][3]
charge = ifelse(str_detect(cation, '\\^') || is.na(charge) || cation == '[box]', '', paste0('^',charge,'^'))
index = ifelse(index == 1 || is.na(index) || cation == '[box]', '', paste0(' x ', index))
ions_cell = paste0(cation, charge, index)
return(ifelse(ions_cell == '', NA, ions_cell))
}) %>%
select(!contains(c('Index', 'Charge'))) %>%
unite(col = !!column_name, !contains(c('Id')), na.rm = TRUE, sep = ', ') %>%
group_by(Id) %>%
summarise(across(!!column_name, function(x) {
ions = unlist(unique(str_split(x, ', ')))
return(paste0(ions, collapse = ', '))
})) %>%
distinct(Id, .keep_all = TRUE) %>%
mutate_all(list(~na_if(.,""))) %>%
ungroup() %>%
select(Id, !!column_name) %>%
left_join(temp, by = 'Id')
rm(temp)
print(paste0(column_name,' has been processed!'))
return(input)
}
data <- initial %>%
# select(!c('Supergroup','Group','Subgroup','Aliases','Series','Chemical_label',
#           'Structural_label','Minerals_Names','Note','Index','Relation_name','Formulae')) %>%
mutate(Id = 1:nrow(initial)) %>%
plain_ions('A')
View(data)
data <- initial %>%
# select(!c('Supergroup','Group','Subgroup','Aliases','Series','Chemical_label',
#           'Structural_label','Minerals_Names','Note','Index','Relation_name','Formulae')) %>%
mutate(Id = 1:nrow(initial)) %>%
plain_ions('A') %>%
plain_ions('B') %>%
plain_ions('C') %>%
plain_ions('D') %>%
plain_ions('E') %>%
plain_ions('F') %>%
plain_ions('X1') %>%
plain_ions('X2') %>%
plain_ions('X3') %>%
plain_ions('Y1') %>%
plain_ions('Y2') %>%
plain_ions('Y3') %>%
plain_ions('V') %>%
plain_ions('W') %>%
plain_ions('Z') %>%
select(Supergroup,Group,Subgroup,Aliases,Series,Chemical_label,
Structural_label, Minerals_Names, Note, Index, Relation_name, Formulae,
A, B, C, D, E, F, X1, X2, X3, Y1, Y2, Y3, V, W, Z)
View(data)
View(output)
View(data)
googlesheets4::write_sheet(data,
ss = '1Wo6n1xggXkITCCApdt_tLsNHOKMxyOgsMqSVpRecYsE',
sheet = 'Groups_ver1')
library(tidyverse)
library(googlesheets4)
library(DBI)
setwd("~/Dropbox/GP-minerals/R scripts/export_to_SQL/")
rm(list=ls())
path <- 'export/'
source('functions.R')
# read Groups data ------------------------------------------------------------
cations <- googlesheets4::read_sheet(
ss='1FCu3ywv1wVMP6IZjwFezjipXXC74S8hRbLZaNzZCWpg',
sheet = 'Cations',
range = 'A:A',
col_names = TRUE,
col_types = 'c',
na = ""
)
anions <- googlesheets4::read_sheet(
ss='1FCu3ywv1wVMP6IZjwFezjipXXC74S8hRbLZaNzZCWpg',
sheet = 'Anions',
range = 'A:A',
col_names = TRUE,
col_types = 'c',
na = ""
)
other <- googlesheets4::read_sheet(
ss='1FCu3ywv1wVMP6IZjwFezjipXXC74S8hRbLZaNzZCWpg',
sheet = 'Neutral, organic and other compounds',
range = 'A:A',
col_names = TRUE,
col_types = 'c',
na = ""
)
silicates <- googlesheets4::read_sheet(
ss='1FCu3ywv1wVMP6IZjwFezjipXXC74S8hRbLZaNzZCWpg',
sheet = 'Silicates',
range = 'A:A',
col_names = TRUE,
col_types = 'c',
na = ""
)
ions <- rbind(cations, anions, other, silicates)
initial <- googlesheets4::read_sheet(
ss='1Wo6n1xggXkITCCApdt_tLsNHOKMxyOgsMqSVpRecYsE',
sheet = 'Groups_ver1',
range = 'M:AA',
col_names = TRUE,
col_types = 'c',
na = ""
)
View(initial)
cations_groups <-
data %>%
unite(ions, c(A, B, C, D, E, F, X1, X2, X3), sep = ', ', na.rm=TRUE) %>%
mutate(ions=str_split(ions, ', ')) %>%
unchop(ions, keep_empty = FALSE) %>%
distinct(ions) %>%
arrange(ions)
cations_groups <-
initial %>%
unite(ions, c(A, B, C, D, E, F, X1, X2, X3), sep = ', ', na.rm=TRUE) %>%
mutate(ions=str_split(ions, ', ')) %>%
unchop(ions, keep_empty = FALSE) %>%
distinct(ions) %>%
arrange(ions)
View(cations_groups)
cations_groups <-
initial %>%
unite(ions, c(A, B, C, D, E, F, X1, X2, X3), sep = ', ', na.rm=TRUE) %>%
mutate(ions=str_split(ions, ', ')) %>%
unchop(ions, keep_empty = FALSE)
View(cations_groups)
View(cations_groups)
cations_groups <-
initial %>%
unite(ions, c(A, B, C, D, E, F, X1, X2, X3, Y1, Y2, Y3, V, W, Z), sep = ', ', na.rm=TRUE) %>%
mutate(ions=str_split(ions, ', '))
View(cations_groups)
cations_groups <-
initial %>%
unite(ions, c(A, B, C, D, E, F, X1, X2, X3, Y1, Y2, Y3, V, W, Z), sep = ', ', na.rm=TRUE) %>%
mutate(ions=str_split(ions, ', ')) %>%
unchop(ions, keep_empty = FALSE)
View(cations_groups)
cations_groups <-
initial %>%
unite(ions, c(A, B, C, D, E, F, X1, X2, X3, Y1, Y2, Y3, V, W, Z), sep = ', ', na.rm=TRUE) %>%
mutate(ions=str_split(ions, ', ')) %>%
unchop(ions, keep_empty = FALSE) %>%
mutate(ions=str_replace(ions, ' x .*', '')) %>%
distinct(ions) %>%
arrange(ions)
View(cations_groups)
# check errors -------------------------------
check <- cations_groups %>%
anti_join(ions, by=c('ions'='Ion'))
View(check)
