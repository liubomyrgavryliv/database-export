rename(parent_id=group, mineral_name=serie)
series_supergroup <- series %>%
filter(is.na(root) & is.na(subgroup) & is.na(group) & !is.na(supergroup)) %>%
mutate(is_top_level = 1) %>%
select(serie, supergroup, is_top_level) %>%
distinct() %>%
rename(parent_id=supergroup, mineral_name=serie)
series <- rbind(series_root, series_root, series_subgroup, series_group, series_supergroup)
# create roots subset ------------------------------------------------------------------------
roots <- initial %>%
filter(!is.na(root))
root_subgroup <- roots %>%
filter(!is.na(subgroup)) %>%
mutate(is_top_level = ifelse(is.na(group) & is.na(supergroup), 1, 0)) %>%
select(root, subgroup, is_top_level) %>%
distinct() %>%
rename(parent_id=subgroup, mineral_name=root)
root_group <- roots %>%
filter(is.na(subgroup) & !is.na(group)) %>%
mutate(is_top_level = ifelse(is.na(supergroup), 1, 0)) %>%
select(root, group, is_top_level) %>%
distinct() %>%
rename(parent_id=group, mineral_name=root)
root_supergroup <- roots %>%
filter(is.na(subgroup) & is.na(group) & !is.na(supergroup)) %>%
mutate(is_top_level = 1) %>%
select(root, supergroup, is_top_level) %>%
distinct() %>%
rename(parent_id=supergroup, mineral_name=root)
roots <- rbind(root_subgroup, root_group, root_supergroup)
# create subgroup subset ------------------------------------------------------------------------
subgroups <- initial %>%
filter(!is.na(subgroup))
subgroup_group <- subgroups %>%
filter(!is.na(group)) %>%
mutate(is_top_level = ifelse(is.na(supergroup), 1, 0)) %>%
select(subgroup, group, is_top_level) %>%
distinct() %>%
rename(parent_id=group, mineral_name=subgroup)
subgroup_supergroup <- subgroups %>%
filter(is.na(group) & !is.na(supergroup)) %>%
mutate(is_top_level = 1) %>%
select(subgroup, supergroup, is_top_level) %>%
distinct() %>%
rename(parent_id=supergroup, mineral_name=subgroup)
subgroups <- rbind(subgroup_group, subgroup_supergroup)
# create group subset ------------------------------------------------------------------------
groups <- initial %>%
filter(!is.na(group))
group_supergroup <- groups %>%
filter(!is.na(supergroup)) %>%
mutate(is_top_level = 1) %>%
select(supergroup, group, is_top_level) %>%
distinct() %>%
rename(parent_id=supergroup, mineral_name=group)
hierarchy <- rbind(minerals, series, roots, subgroups, group_supergroup)
# Create subset with parent_id - NULL values
parents <- hierarchy %>%
filter(is_top_level == 1) %>%
rename(parent_id=mineral_name, mineral_name=parent_id) %>%
mutate(parent_id=NA) %>%
select(mineral_name, parent_id) %>%
distinct(mineral_name, .keep_all = T)
# FINAL SUBSET
mineral_hierarchy <-
hierarchy %>%
select(!is_top_level) %>%
rbind(parents) %>%
inner_join(mineral_list, by=c('mineral_name' = 'mineral_name'), copy=TRUE) %>%
left_join(mineral_list, by=c('parent_id' = 'mineral_name'), copy=TRUE) %>%
select(mineral_id.x, mineral_id.y) %>%
rename(mineral_id=mineral_id.x, parent_id=mineral_id.y) %>%
distinct()
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE mineral_hierarchy RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "mineral_hierarchy", mineral_hierarchy, append=TRUE)
library(tidyverse)
library(googlesheets4)
library(tidyjson)
library(DBI)
setwd("~/Dropbox/GP-minerals/R scripts/export_to_SQL/")
rm(list=ls())
path <- 'export/'
source('functions.R')
status_data <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Status data',
range = 'A:D',
col_names = TRUE,
na = ""
) %>%
select(Mineral_Name, all_indexes, IMA.Status) %>%
filter(str_detect(all_indexes, '0.0'))
View(status_data)
status_data <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Status data',
range = 'A:D',
col_names = TRUE,
na = ""
) %>%
filter(str_detect(all_indexes, '0.0')) %>%
select(Mineral_Name, IMA.Status)
names <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Names data',
range = 'A:B',
col_names = TRUE,
na = ""
) %>%
select(Mineral_Name, discovery_year_min)
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?'))
nickel_strunz <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Nickel-Strunz',
range = 'A:N',
col_names = TRUE,
na = ""
) %>%
select(Mineral_Name, all_indexes, IMA.Status) %>%
filter(str_detect(all_indexes, '0.0'))
nickel_strunz <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Nickel-Strunz',
range = 'A:N',
col_names = TRUE,
na = ""
)
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?'))
View(periodic_table)
periodic_table <- nickel_strunz %>%
mutate(elements = unique(str_match_all(Formula, '[A-Z][a-z]?')))
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?'))
View(periodic_table)
periodic_table %>% filter(Mineral_Name == 'Alumino-oxy-rossmanite')
periodic_table %>%
filter(Mineral_Name == 'Alumino-oxy-rossmanite') %>%
select(elements)
periodic_table %>%
filter(Mineral_Name == 'Alumino-oxy-rossmanite')
periodic_table[0]
periodic_table[1]
periodic_table$elements[1]
periodic_table$elements
periodic_table$elements[2]
periodic_table$elements[3]
periodic_table$elements[1000]
typeof(periodic_table$elements[1000])
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
rowwise() %>%
distinct(elements)
View(nickel_strunz)
View(periodic_table)
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
rowwise() %>%
mutate(test = distinct(elements))
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
rowwise() %>%
mutate(test = unique(elements))
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
rowwise() %>%
mutate(test = distinct(unlist(elements)))
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
rowwise() %>%
distinct(unlist(elements))
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
rowwise() %>%
unique(unlist(elements))
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
rowwise() %>%
mutate(some = unique(unlist(elements)))
periodic_table$elements[1000]
unique(periodic_table$elements[1000])
View(periodic_table)
unique(periodic_table$elements[5467])
unlist(periodic_table$elements[5467])
unique(unlist(periodic_table$elements[5467]))
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
rowwise() %>%
mutate(test = map(elements, function(x) { unique(unlist(x))  })) %>%
periodic_table %>%
filter(Mineral_Name == 'Alumino-oxy-rossmanite') %>%
select(elements)
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
rowwise() %>%
mutate(test = map(elements, function(x) { unique(unlist(x))  }))
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
rowwise() %>%
mutate(test = map(elements, function(x) { return(unique(unlist(x)))  }))
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
rowwise() %>%
mutate(test = map(elements, function(x) { list(unique(unlist(x)))  }))
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
rowwise() %>%
mutate(test = map(elements, function(x) { x  }))
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
rowwise() %>%
mutate(test = map(elements, function(x) { return(x) }))
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
mutate(test = map(elements, function(x) { return(x) }))
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
mutate(test = map(elements, function(x) { unique(unlist(x))  }))
View(periodic_table)
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
mutate(test = map(elements, function(x) { paste(unique(unlist(x)), sep=';')  }))
View(periodic_table)
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
mutate(test = map(elements, function(x) { paste(unique(unlist(x)), collapse=';')  }))
View(periodic_table)
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
mutate(elements = map(elements, function(x) { paste(unique(unlist(x)), collapse=';')  })) %>%
mutate(Formula = ifelse(!is.na(Formula), str_replace_all(Formula, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(Formula = ifelse(!is.na(Formula), str_replace_all(Formula, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(silicate_html = ifelse(!is.na(silicates_real), str_replace_all(silicates_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(silicate_html = ifelse(!is.na(silicate_html), str_replace_all(silicate_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(cation_html = ifelse(!is.na(cations_real), str_replace_all(cations_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(cation_html = ifelse(!is.na(cation_html), str_replace_all(cation_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(anions_html = ifelse(!is.na(anions_real), str_replace_all(anions_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(anions_html = ifelse(!is.na(anions_html), str_replace_all(anions_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(other_html = ifelse(!is.na(other_real), str_replace_all(other_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(other_html = ifelse(!is.na(other_html), str_replace_all(other_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA))
View(periodic_table)
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
mutate(elements = map(elements, function(x) { paste(unique(unlist(x)), collapse=';')  })) %>%
mutate(Formula = ifelse(!is.na(Formula), str_replace_all(Formula, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(Formula = ifelse(!is.na(Formula), str_replace_all(Formula, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(silicate_html = ifelse(!is.na(silicates_real), str_replace_all(silicates_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(silicate_html = ifelse(!is.na(silicate_html), str_replace_all(silicate_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(cation_html = ifelse(!is.na(cations_real), str_replace_all(cations_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(cation_html = ifelse(!is.na(cation_html), str_replace_all(cation_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(anions_html = ifelse(!is.na(anions_real), str_replace_all(anions_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(anions_html = ifelse(!is.na(anions_html), str_replace_all(anions_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(other_html = ifelse(!is.na(other_real), str_replace_all(other_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(other_html = ifelse(!is.na(other_html), str_replace_all(other_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
left_join(names, by='Mineral_Name')
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
mutate(elements = map(elements, function(x) { paste(unique(unlist(x)), collapse=';')  })) %>%
mutate(Formula = ifelse(!is.na(Formula), str_replace_all(Formula, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(Formula = ifelse(!is.na(Formula), str_replace_all(Formula, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(silicate_html = ifelse(!is.na(silicates_real), str_replace_all(silicates_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(silicate_html = ifelse(!is.na(silicate_html), str_replace_all(silicate_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(cation_html = ifelse(!is.na(cations_real), str_replace_all(cations_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(cation_html = ifelse(!is.na(cation_html), str_replace_all(cation_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(anions_html = ifelse(!is.na(anions_real), str_replace_all(anions_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(anions_html = ifelse(!is.na(anions_html), str_replace_all(anions_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(other_html = ifelse(!is.na(other_real), str_replace_all(other_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(other_html = ifelse(!is.na(other_html), str_replace_all(other_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
left_join(names, by='Mineral_Name') %>%
left_join(status_data, by='Mineral_Name') %>%
rename(strunz=Strunz)
View(periodic_table)
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
mutate(elements = map(elements, function(x) { paste(unique(unlist(x)), collapse=';')  })) %>%
mutate(Formula = ifelse(!is.na(Formula), str_replace_all(Formula, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(Formula = ifelse(!is.na(Formula), str_replace_all(Formula, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(silicate_html = ifelse(!is.na(silicates_real), str_replace_all(silicates_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(silicate_html = ifelse(!is.na(silicate_html), str_replace_all(silicate_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(cation_html = ifelse(!is.na(cations_real), str_replace_all(cations_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(cation_html = ifelse(!is.na(cation_html), str_replace_all(cation_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(anions_html = ifelse(!is.na(anions_real), str_replace_all(anions_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(anions_html = ifelse(!is.na(anions_html), str_replace_all(anions_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(other_html = ifelse(!is.na(other_real), str_replace_all(other_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(other_html = ifelse(!is.na(other_html), str_replace_all(other_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
left_join(names, by='Mineral_Name') %>%
left_join(status_data, by='Mineral_Name') %>%
rename(strunz=Strunz, formula=Formula, ima=IMA.Status)
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
mutate(elements = map(elements, function(x) { paste(unique(unlist(x)), collapse=';')  })) %>%
mutate(Formula = ifelse(!is.na(Formula), str_replace_all(Formula, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(Formula = ifelse(!is.na(Formula), str_replace_all(Formula, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(silicate_html = ifelse(!is.na(silicates_real), str_replace_all(silicates_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(silicate_html = ifelse(!is.na(silicate_html), str_replace_all(silicate_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(cation_html = ifelse(!is.na(cations_real), str_replace_all(cations_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(cation_html = ifelse(!is.na(cation_html), str_replace_all(cation_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(anions_html = ifelse(!is.na(anions_real), str_replace_all(anions_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(anions_html = ifelse(!is.na(anions_html), str_replace_all(anions_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(other_html = ifelse(!is.na(other_real), str_replace_all(other_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(other_html = ifelse(!is.na(other_html), str_replace_all(other_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
left_join(names, by='Mineral_Name') %>%
left_join(status_data, by='Mineral_Name') %>%
rename(strunz=Strunz, formula=Formula, ima=IMA.Status, cation=cations_theoretical, anion=anions_theoretical,silicate=silicates_theoretical,
year=discovery_year_min,other=other_theoretical, name=Mineral_Name) %>%
select(name,
cation,
anion,
silicate,
silicate_html,
cation_html,
anion_html,
elements,
strunz,
formula,
ima,
year)
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
mutate(elements = map(elements, function(x) { paste(unique(unlist(x)), collapse=';')  })) %>%
mutate(Formula = ifelse(!is.na(Formula), str_replace_all(Formula, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(Formula = ifelse(!is.na(Formula), str_replace_all(Formula, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(silicate_html = ifelse(!is.na(silicates_real), str_replace_all(silicates_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(silicate_html = ifelse(!is.na(silicate_html), str_replace_all(silicate_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(cation_html = ifelse(!is.na(cations_real), str_replace_all(cations_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(cation_html = ifelse(!is.na(cation_html), str_replace_all(cation_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(anion_html = ifelse(!is.na(anions_real), str_replace_all(anions_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(anion_html = ifelse(!is.na(anion_html), str_replace_all(anion_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(other_html = ifelse(!is.na(other_real), str_replace_all(other_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(other_html = ifelse(!is.na(other_html), str_replace_all(other_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
left_join(names, by='Mineral_Name') %>%
left_join(status_data, by='Mineral_Name') %>%
rename(strunz=Strunz, formula=Formula, ima=IMA.Status, cation=cations_theoretical, anion=anions_theoretical,silicate=silicates_theoretical,
year=discovery_year_min,other=other_theoretical, name=Mineral_Name) %>%
select(name,
cation,
anion,
silicate,
silicate_html,
cation_html,
anion_html,
elements,
strunz,
formula,
ima,
year)
View(periodic_table)
View(periodic_table)
View(names)
names <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Names data',
range = 'A:B',
col_names = TRUE,
col_types = 'cc',
na = ""
) %>%
select(Mineral_Name, discovery_year_min)
View(names)
View(nickel_strunz)
View(periodic_table)
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
mutate(elements = map(elements, function(x) { ifelse(!is.na(x), paste(unique(unlist(x)), collapse=';'), NA)  })) %>%
mutate(Formula = ifelse(!is.na(Formula), str_replace_all(Formula, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(Formula = ifelse(!is.na(Formula), str_replace_all(Formula, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(silicate_html = ifelse(!is.na(silicates_real), str_replace_all(silicates_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(silicate_html = ifelse(!is.na(silicate_html), str_replace_all(silicate_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(cation_html = ifelse(!is.na(cations_real), str_replace_all(cations_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(cation_html = ifelse(!is.na(cation_html), str_replace_all(cation_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(anion_html = ifelse(!is.na(anions_real), str_replace_all(anions_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(anion_html = ifelse(!is.na(anion_html), str_replace_all(anion_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(other_html = ifelse(!is.na(other_real), str_replace_all(other_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(other_html = ifelse(!is.na(other_html), str_replace_all(other_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
left_join(names, by='Mineral_Name') %>%
left_join(status_data, by='Mineral_Name') %>%
rename(strunz=Strunz, formula=Formula, ima=IMA.Status, cation=cations_theoretical, anion=anions_theoretical,silicate=silicates_theoretical,
year=discovery_year_min,other=other_theoretical, name=Mineral_Name) %>%
select(name,
cation,
anion,
silicate,
silicate_html,
cation_html,
anion_html,
elements,
strunz,
formula,
ima,
year)
View(periodic_table)
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
mutate(elements = map(elements, function(x) { ifelse(!is.na(x), paste(unique(unlist(x)), collapse=';'), NA_character_)  }))
View(periodic_table)
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?'))
View(periodic_table)
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
mutate(elements = map(elements, function(x) { paste(unique(unlist(x)), collapse=';')  }))
View(periodic_table)
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
mutate(elements = map(elements, function(x) { paste(unique(unlist(x)), collapse=';')  })) %>%
mutate(elements = str_replace(elements, 'NA', NA)) %>%
mutate(Formula = ifelse(!is.na(Formula), str_replace_all(Formula, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(Formula = ifelse(!is.na(Formula), str_replace_all(Formula, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(silicate_html = ifelse(!is.na(silicates_real), str_replace_all(silicates_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(silicate_html = ifelse(!is.na(silicate_html), str_replace_all(silicate_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(cation_html = ifelse(!is.na(cations_real), str_replace_all(cations_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(cation_html = ifelse(!is.na(cation_html), str_replace_all(cation_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(anion_html = ifelse(!is.na(anions_real), str_replace_all(anions_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(anion_html = ifelse(!is.na(anion_html), str_replace_all(anion_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(other_html = ifelse(!is.na(other_real), str_replace_all(other_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(other_html = ifelse(!is.na(other_html), str_replace_all(other_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
left_join(names, by='Mineral_Name') %>%
left_join(status_data, by='Mineral_Name') %>%
rename(strunz=Strunz, formula=Formula, ima=IMA.Status, cation=cations_theoretical, anion=anions_theoretical,silicate=silicates_theoretical,
year=discovery_year_min,other=other_theoretical, name=Mineral_Name) %>%
select(name,
cation,
anion,
silicate,
silicate_html,
cation_html,
anion_html,
elements,
strunz,
formula,
ima,
year)
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
mutate(elements = map(elements, function(x) { paste(unique(unlist(x)), collapse=';')  })) %>%
mutate(elements = str_replace(elements, 'NA', NA_character_)) %>%
mutate(Formula = ifelse(!is.na(Formula), str_replace_all(Formula, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(Formula = ifelse(!is.na(Formula), str_replace_all(Formula, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(silicate_html = ifelse(!is.na(silicates_real), str_replace_all(silicates_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(silicate_html = ifelse(!is.na(silicate_html), str_replace_all(silicate_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(cation_html = ifelse(!is.na(cations_real), str_replace_all(cations_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(cation_html = ifelse(!is.na(cation_html), str_replace_all(cation_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(anion_html = ifelse(!is.na(anions_real), str_replace_all(anions_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(anion_html = ifelse(!is.na(anion_html), str_replace_all(anion_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(other_html = ifelse(!is.na(other_real), str_replace_all(other_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(other_html = ifelse(!is.na(other_html), str_replace_all(other_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
left_join(names, by='Mineral_Name') %>%
left_join(status_data, by='Mineral_Name') %>%
rename(strunz=Strunz, formula=Formula, ima=IMA.Status, cation=cations_theoretical, anion=anions_theoretical,silicate=silicates_theoretical,
year=discovery_year_min,other=other_theoretical, name=Mineral_Name) %>%
select(name,
cation,
anion,
silicate,
silicate_html,
cation_html,
anion_html,
elements,
strunz,
formula,
ima,
year)
View(periodic_table)
status_data <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Status data',
range = 'A:D',
col_names = TRUE,
na = ""
) %>%
select(Mineral_Name, all_indexes, IMA.Status)
periodic_table <- nickel_strunz %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
mutate(elements = map(elements, function(x) { paste(unique(unlist(x)), collapse=';')  })) %>%
mutate(elements = str_replace(elements, 'NA', NA_character_)) %>%
mutate(Formula = ifelse(!is.na(Formula), str_replace_all(Formula, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(Formula = ifelse(!is.na(Formula), str_replace_all(Formula, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(silicate_html = ifelse(!is.na(silicates_real), str_replace_all(silicates_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(silicate_html = ifelse(!is.na(silicate_html), str_replace_all(silicate_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(cation_html = ifelse(!is.na(cations_real), str_replace_all(cations_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(cation_html = ifelse(!is.na(cation_html), str_replace_all(cation_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(anion_html = ifelse(!is.na(anions_real), str_replace_all(anions_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(anion_html = ifelse(!is.na(anion_html), str_replace_all(anion_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
mutate(other_html = ifelse(!is.na(other_real), str_replace_all(other_real, '\\_(.*?)\\_',"<sub>\\1</sub>"), NA)) %>%
mutate(other_html = ifelse(!is.na(other_html), str_replace_all(other_html, '\\^(.*?)\\^',"<sup>\\1</sup>"), NA)) %>%
left_join(names, by='Mineral_Name') %>%
left_join(status_data, by='Mineral_Name') %>%
rename(strunz=Strunz, formula=Formula, ima=IMA.Status, cation=cations_theoretical, anion=anions_theoretical,silicate=silicates_theoretical,
year=discovery_year_min,other=other_theoretical, name=Mineral_Name) %>%
filter(str_detect(all_indexes, '0.0')) %>%
select(name,
cation,
anion,
silicate,
silicate_html,
cation_html,
anion_html,
elements,
strunz,
formula,
ima,
year)
View(periodic_table)
# Export data
write.csv(mindex_out, 'periodic_table_10022021.csv', na='', quote = F, row.names = F)
# Export data
write.csv(periodic_table, 'periodic_table_10022021.csv', na='', quote = F, row.names = F)
View(periodic_table)
write_csv(periodic_table, 'periodic_table_10022021.csv', na='', quote_escape = "double")
write_csv(periodic_table, 'periodic_table_10022021.csv', na='', quote_escape = "double")
