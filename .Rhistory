library(tidyjson)
library(DBI)
library(RCurl)
setwd("~/Dropbox/GP-minerals/R scripts/export_to_SQL/")
rm(list=ls())
path <- 'export/'
names <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Names data',
#range = 'A:AY',
col_names = TRUE,
col_types = 'c',
na = ""
)
status <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Status data',
range = 'A:D',
col_names = TRUE,
col_types = 'c',
na = ""
)
stats <- names %>%
left_join(status, by=c('Mineral_Name'))
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
filter(!is.na(Person))
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
filter(str_detect(Gender, 'F'))
View(stats)
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
filter(str_detect(Gender, 'F')) %>%
filter(!str_detect(Gender, 'M'))
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
filter(str_detect(Gender, 'M')) %>%
filter(!str_detect(Gender, 'F'))
2655+104
2655+122
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
filter(str_detect(Gender, 'M'))
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
filter(str_detect(Gender, 'M')) %>%
filter(!str_detect(Gender, 'F'))
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
filter(str_detect(Gender, 'F')) %>%
filter(!str_detect(Gender, 'M'))
View(stats)
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
filter(str_detect(Gender, 'F')) %>%
filter(str_detect(Gender, 'M'))
View(stats)
2655+104
2655+104 + 18
# Women
# Both
# minerals named after F
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
filter(!is.na(Gender))
# Women
# Both
# minerals named after F
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
filter(!is.na(Gender)) %>%
filter(str_detect(all_indexes, '0.0'))
# Women
# Both
# minerals named after F
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
filter(str_detect(all_indexes, '0.0'))
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
filter(str_detect(all_indexes, '0.0')) %>%
filter(str_detect(Gender, 'F')) %>%
filter(str_detect(Gender, 'M'))
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
filter(str_detect(all_indexes, '0.0')) %>%
filter(str_detect(Gender, 'F')) %>%
filter(!str_detect(Gender, 'M'))
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
filter(str_detect(all_indexes, '0.0')) %>%
filter(str_detect(Gender, 'M')) %>%
filter(!str_detect(Gender, 'F'))
2328+96
2328+96+17
library(tidyverse)
library(googlesheets4)
library(tidyjson)
library(DBI)
library(RCurl)
setwd("~/Dropbox/GP-minerals/R scripts/export_to_SQL/")
rm(list=ls())
path <- 'export/'
names <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Names data',
#range = 'A:AY',
col_names = TRUE,
col_types = 'c',
na = ""
)
status <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Status data',
range = 'A:D',
col_names = TRUE,
col_types = 'c',
na = ""
)
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
# filter(str_detect(all_indexes, '0.0')) %>%
filter(str_detect(Gender, 'F')) %>%
filter(!str_detect(Gender, 'M'))
# Women
# Both
# minerals named after F
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
# filter(str_detect(all_indexes, '0.0')) %>%
filter(str_detect(Gender, 'F')) %>%
filter(!str_detect(Gender, 'M')) %>%
select(Mineral_Name)
write_csv(stats, 'stats.csv', na='', quote_escape = "double")
library(tidyverse)
library(googlesheets4)
library(tidyjson)
library(DBI)
library(RCurl)
setwd("~/Dropbox/GP-minerals/R scripts/export_to_SQL/")
rm(list=ls())
path <- 'export/'
ns <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Nickel-Strunz',
col_names = TRUE,
col_types = 'c',
na = ""
) %>%
select(Mineral_Name, Index, Formula, Strunz)
status <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Status data',
range = 'A:D',
col_names = TRUE,
col_types = 'c',
na = ""
)
stats <- ns %>%
left_join(status, by=c('Mineral_Name'))
View(stats)
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = str_match_all('[A-Z][a-z]',Formula))
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]',))
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?'))
View(stats)
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = unique(str_match_all(Formula, '[A-Z][a-z]?')))
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = paste0(str_match_all(Formula, '[A-Z][a-z]?')))
View(ns)
View(stats)
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = paste0(unique(str_match_all(Formula, '[A-Z][a-z]?'))))
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?'))
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
rowwise() %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?'))
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
rowwise() %>%
mutate(elements = unique(str_match_all(Formula, '[A-Z][a-z]?')))
View(stats)
View(stats)
c("N", "H", "Al", "C", "O", "P", "O", "O", "H", "H", "O")
unique(c("N", "H", "Al", "C", "O", "P", "O", "O", "H", "H", "O"))
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
rowwise() %>%
mutate(elements = unique(str_match_all(Formula, '[A-Z][a-z]?')))
View(stats)
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
unchop(elements, keep_empty = TRUE)
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
unchop(elements, keep_empty = TRUE) %>%
distinct(Mineral_Name, Formula, elements)
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
unchop(elements, keep_empty = TRUE) %>%
distinct(Mineral_Name, Formula, elements) %>%
group_by(Mineral_Name) %>%
summarise(elements=paste0(elements))
View(stats)
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
unchop(elements, keep_empty = TRUE) %>%
distinct(Mineral_Name, Formula, elements) %>%
group_by(Mineral_Name) %>%
summarise(elements=list(elements))
View(stats)
length()
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
unchop(elements, keep_empty = TRUE) %>%
distinct(Mineral_Name, Formula, elements) %>%
group_by(Mineral_Name) %>%
summarise(elements=list(elements), count=length(elements))
View(stats)
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
unchop(elements, keep_empty = TRUE) %>%
distinct(Mineral_Name, Formula, elements) %>%
group_by(Mineral_Name) %>%
summarise(elements=list(elements)) %>%
mutate(counts=length(elements))
View(stats)
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
unchop(elements, keep_empty = TRUE) %>%
distinct(Mineral_Name, Formula, elements) %>%
group_by(Mineral_Name) %>%
summarise(elements=list(elements)) %>%
rowwise() %>%
mutate(counts=length(elements))
View(stats)
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
unchop(elements, keep_empty = TRUE) %>%
distinct(Mineral_Name, Formula, elements) %>%
group_by(Mineral_Name) %>%
summarise(elements=list(elements)) %>%
rowwise() %>%
mutate(counts=length(elements)) %>%
arrange(counts)
View(stats)
?arrange
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
unchop(elements, keep_empty = TRUE) %>%
distinct(Mineral_Name, Formula, elements) %>%
group_by(Mineral_Name) %>%
summarise(elements=list(elements)) %>%
rowwise() %>%
mutate(counts=length(elements)) %>%
arrange(desc(counts) )
View(stats)
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
unchop(elements, keep_empty = TRUE) %>%
distinct(Mineral_Name, Formula, elements) %>%
group_by(Mineral_Name) %>%
summarise(elements=list(elements)) %>%
rowwise() %>%
mutate(counts=length(elements)) %>%
filter(is.na(elements)) %>%
arrange(desc(counts))
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
unchop(elements, keep_empty = TRUE) %>%
distinct(Mineral_Name, Formula, elements) %>%
group_by(Mineral_Name) %>%
summarise(elements=list(elements)) %>%
rowwise() %>%
mutate(counts=length(elements)) %>%
filter(!is.na(elements)) %>%
arrange(desc(counts))
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
unchop(elements, keep_empty = TRUE) %>%
distinct(Mineral_Name, Formula, elements) %>%
group_by(Mineral_Name) %>%
summarise(elements=list(elements)) %>%
rowwise() %>%
mutate(counts=length(elements)) %>%
colwise() %>%
filter(!is.na(elements)) %>%
arrange(desc(counts))
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
unchop(elements, keep_empty = TRUE) %>%
distinct(Mineral_Name, Formula, elements) %>%
group_by(Mineral_Name) %>%
summarise(elements=list(elements)) %>%
filter(!is.na(elements)) %>%
rowwise() %>%
mutate(counts=length(elements)) %>%
arrange(desc(counts))
View(stats)
View(stats)
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
unchop(elements, keep_empty = TRUE) %>%
distinct(Mineral_Name, Formula, elements) %>%
group_by(Mineral_Name) %>%
summarise(elements=list(elements)) %>%
filter(!is.na(elements)) %>%
rowwise() %>%
mutate(counts=length(elements)) %>%
arrange(desc(counts)) %>%
group_by(counts) %>%
summarise(count=sum(counts))
View(stats)
stats %>%
group_by(counts) %>%
summarise(count=sum(counts))
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
unchop(elements, keep_empty = TRUE) %>%
distinct(Mineral_Name, Formula, elements) %>%
group_by(Mineral_Name) %>%
summarise(elements=list(elements)) %>%
filter(!is.na(elements)) %>%
rowwise() %>%
mutate(counts=length(elements)) %>%
arrange(desc(counts))
stats %>%
group_by(counts) %>%
summarise(count=sum(counts))
View(stats)
stats %>%
group_by(counts) %>%
summarise(count=length(counts))
View(stats)
View(stats)
1587 + 1808 +1067
4462/7038*100
# minerals with biggest formulas
stats <- ns %>%
left_join(status, by=c('Mineral_Name')) %>%
mutate(elements = str_match_all(Formula, '[A-Z][a-z]?')) %>%
unchop(elements, keep_empty = TRUE) %>%
distinct(Mineral_Name, Formula, elements) %>%
group_by(Mineral_Name) %>%
summarise(elements=list(elements)) %>%
filter(!is.na(elements)) %>%
rowwise() %>%
mutate(counts=length(elements)) %>%
arrange(desc(counts))
stats %>%
filter(counts = 4)
stats %>%
filter(counts == 4)
stats< -
stats %>%
filter(counts == 4)
stats< - stats %>%
filter(counts == 4)
stats <- stats %>%
filter(counts == 4)
View(stats)
library(tidyverse)
library(googlesheets4)
library(tidyjson)
library(DBI)
library(RCurl)
setwd("~/Dropbox/GP-minerals/R scripts/export_to_SQL/")
rm(list=ls())
path <- 'export/'
names <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Names data',
#range = 'A:AY',
col_names = TRUE,
col_types = 'c',
na = ""
)
status <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Status data',
range = 'A:D',
col_names = TRUE,
col_types = 'c',
na = ""
)
# minerals discovered by Ireland
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
filter(str_detect(discovery_country, 'Ireland'))
View(stats)
# minerals discovered by Ireland
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
filter(str_detect(discovery_country, '(?! )Ireland'))
# minerals discovered by Ireland
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
filter(str_detect(discovery_country, '(?!\s)Ireland'))
# minerals discovered by Ireland
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
filter(str_detect(discovery_country, '(?!\\s)Ireland'))
# minerals discovered by Ireland
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
filter(str_detect(discovery_country, '^Ireland'))
View(stats)
# minerals discovered by Ireland
stats <- names %>%
left_join(status, by=c('Mineral_Name')) %>%
filter(str_detect(discovery_country, '^Ireland') | str_detect(Nationality, 'Irish'))
View(stats)
library(tidyverse)
library(googlesheets4)
library(tidyjson)
library(DBI)
library(RCurl)
setwd("~/Dropbox/GP-minerals/R scripts/export_to_SQL/")
rm(list=ls())
path <- 'export/'
names <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Names data',
#range = 'A:AY',
col_names = TRUE,
col_types = 'c',
na = ""
)
status <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Status data',
range = 'A:D',
col_names = TRUE,
col_types = 'c',
na = ""
)
ns <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Nickel-Strunz',
col_names = TRUE,
col_types = 'c',
na = ""
) %>%
select(Mineral_Name, Index, Formula, Strunz)
library(tidyverse)
library(googlesheets4)
library(tidyjson)
library(DBI)
library(RCurl)
setwd("~/Dropbox/GP-minerals/R scripts/export_to_SQL/")
rm(list=ls())
path <- 'export/'
names <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Names data',
#range = 'A:AY',
col_names = TRUE,
col_types = 'c',
na = ""
)
