# parse data
mineral_impurity <- initial %>%
select(Mineral_Name, Impurities, Content) %>%
filter(!is.na(Impurities)) %>%
mutate(ion_quantity=ifelse(str_detect(Content,'[0-9]'),Content, NA),
rich_poor=ifelse(str_detect(Content,'\\([\\+\\-]'),Content, NA))
View(mineral_impurity)
# parse data
mineral_impurity <- initial %>%
select(Mineral_Name, Impurities, Content) %>%
filter(!is.na(Impurities)) %>%
mutate(ion_quantity=ifelse(str_detect(Content,'[0-9]'),Content, NA),
rich_poor=ifelse(str_detect(Content,'\\([\\+\\-]'),Content, NA)) %>%
mutate(ion_quantity = str_split(ion_quantity, '\\,\\ |\\;|,'),
rich_poor = str_split(rich_poor, '\\,\\ |\\;|,')) %>%
unchop(ion_quantity, keep_empty = TRUE) %>%
unchop(rich_poor, keep_empty = TRUE) %>%
distinct(Mineral_Name, ion_quantity, rich_poor) %>%
filter(Mineral_Name == 'Blue Beryl (Maxixe)')
View(mineral_impurity)
# parse data
mineral_impurity <- initial %>%
select(Mineral_Name, Impurities, Content) %>%
filter(!is.na(Impurities)) %>%
mutate(ion_quantity=ifelse(str_detect(Content,'[0-9]'),Content, NA),
rich_poor=ifelse(str_detect(Content,'\\([\\+\\-]'),Content, NA)) %>%
mutate(ion_quantity = str_split(ion_quantity, '\\,\\ |\\;|,'),
rich_poor = str_split(rich_poor, '\\,\\ |\\;|,')) %>%
unchop(ion_quantity, keep_empty = TRUE) %>%
unchop(rich_poor, keep_empty = TRUE) %>%
distinct(Mineral_Name, Impurities, ion_quantity, rich_poor) %>%
filter(Mineral_Name == 'Blue Beryl (Maxixe)')
View(mineral_impurity)
# parse data
mineral_impurity <- initial %>%
select(Mineral_Name, Impurities, Content) %>%
filter(!is.na(Impurities)) %>%
mutate(ion_quantity=ifelse(str_detect(Content,'[0-9]'),Content, NA),
rich_poor=ifelse(str_detect(Content,'\\([\\+\\-]'),Content, NA)) %>%
mutate(ion_quantity = str_split(ion_quantity, '\\,\\ |\\;|,'),
rich_poor = str_split(rich_poor, '\\,\\ |\\;|,'),
Impurities = str_split(Impurities, '\\,\\ |\\;|,')) %>%
unchop(Impurities, keep_empty = TRUE) %>%
unchop(ion_quantity, keep_empty = TRUE) %>%
unchop(rich_poor, keep_empty = TRUE) %>%
distinct(Mineral_Name, Impurities, ion_quantity, rich_poor) %>%
filter(Mineral_Name == 'Blue Beryl (Maxixe)')
View(mineral_impurity)
mineral_impurity <- initial %>%
select(Mineral_Name, Impurities, Content) %>%
filter(!is.na(Impurities)) %>%
mutate(ion_quantity=ifelse(str_detect(Content,'[0-9]'),Content, NA),
rich_poor=ifelse(str_detect(Content,'\\([\\+\\-]'),Content, NA)) %>%
mutate(ion_quantity = str_split(ion_quantity, '\\,\\ |\\;|,'),
rich_poor = str_split(rich_poor, '\\,\\ |\\;|,'),
Impurities = str_split(Impurities, '\\,\\ |\\;|,'))
View(ion_list)
View(mineral_impurity)
# parse data
mineral_impurity <- initial %>%
select(Mineral_Name, Impurities, Content) %>%
filter(!is.na(Impurities)) %>%
mutate(ion_quantity=ifelse(str_detect(Content,'[0-9]'),Content, NA),
rich_poor=ifelse(str_detect(Content,'\\([\\+\\-]'),Content, NA)) %>%
mutate(ion_quantity = str_split(ion_quantity, '\\,\\ |\\;|,'),
rich_poor = str_split(rich_poor, '\\,\\ |\\;|,'),
Impurities = str_split(Impurities, '\\,\\ |\\;|,')) %>%
unchop(c('Impurities'), keep_empty = TRUE)
mineral_impurity <- initial %>%
select(Mineral_Name, Impurities, Content) %>%
filter(!is.na(Impurities)) %>%
mutate(ion_quantity=ifelse(str_detect(Content,'[0-9]'),Content, NA),
rich_poor=ifelse(str_detect(Content,'\\([\\+\\-]'),Content, NA)) %>%
mutate(ion_quantity = str_split(ion_quantity, '\\,\\ |\\;|,'),
rich_poor = str_split(rich_poor, '\\,\\ |\\;|,'),
Impurities = str_split(Impurities, '\\,\\ |\\;|,')) %>%
unchop(c('Impurities', 'ion_quantity'), keep_empty = TRUE)
View(mineral_impurity)
# unchop(ion_quantity, keep_empty = TRUE) %>%
# unchop(rich_poor, keep_empty = TRUE) %>%
# parse data
mineral_impurity <- initial %>%
select(Mineral_Name, Impurities, Content) %>%
filter(!is.na(Impurities)) %>%
mutate(ion_quantity=ifelse(str_detect(Content,'[0-9]'),Content, NA),
rich_poor=ifelse(str_detect(Content,'\\([\\+\\-]'),Content, NA)) %>%
mutate(ion_quantity = str_split(ion_quantity, '\\,\\ |\\;|,'),
rich_poor = str_split(rich_poor, '\\,\\ |\\;|,'),
Impurities = str_split(Impurities, '\\,\\ |\\;|,')) %>%
unchop(c('Impurities', 'ion_quantity'), keep_empty = TRUE) %>%
# unchop(ion_quantity, keep_empty = TRUE) %>%
# unchop(rich_poor, keep_empty = TRUE) %>%
distinct(Mineral_Name, Impurities, ion_quantity, rich_poor) %>%
filter(Mineral_Name == 'Blue Beryl (Maxixe)')
View(mineral_impurity)
# parse data
mineral_impurity <- initial %>%
select(Mineral_Name, Impurities, Content) %>%
filter(!is.na(Impurities)) %>%
mutate(ion_quantity=ifelse(str_detect(Content,'[0-9]'),Content, NA),
rich_poor=ifelse(str_detect(Content,'\\([\\+\\-]'),Content, NA)) %>%
mutate(ion_quantity = str_split(ion_quantity, '\\,\\ |\\;|,'),
rich_poor = str_split(rich_poor, '\\,\\ |\\;|,'),
Impurities = str_split(Impurities, '\\,\\ |\\;|,')) %>%
unchop(c('Impurities', 'ion_quantity', 'rich_poor'), keep_empty = TRUE) %>%
# unchop(ion_quantity, keep_empty = TRUE) %>%
# unchop(rich_poor, keep_empty = TRUE) %>%
distinct(Mineral_Name, Impurities, ion_quantity, rich_poor) %>%
filter(Mineral_Name == 'Blue Beryl (Maxixe)')
mineral_impurity <- initial %>%
select(Mineral_Name, Impurities, Content) %>%
filter(!is.na(Impurities)) %>%
mutate(ion_quantity=ifelse(str_detect(Content,'[0-9]'),Content, NA),
rich_poor=ifelse(str_detect(Content,'\\([\\+\\-]'),Content, NA)) %>%
mutate(ion_quantity = str_split(ion_quantity, '\\,\\ |\\;|,'),
rich_poor = str_split(rich_poor, '\\,\\ |\\;|,'),
Impurities = str_split(Impurities, '\\,\\ |\\;|,')) %>%
unchop(c('Impurities', 'ion_quantity', 'rich_poor'), keep_empty = TRUE) %>%
# unchop(ion_quantity, keep_empty = TRUE) %>%
# unchop(rich_poor, keep_empty = TRUE) %>%
distinct(Mineral_Name, Impurities, ion_quantity, rich_poor)
View(mineral_impurity)
# parse data
mineral_impurity <- initial %>%
select(Mineral_Name, Impurities, Content) %>%
filter(!is.na(Impurities)) %>%
mutate(ion_quantity=ifelse(str_detect(Content,'[0-9]'),Content, NA),
rich_poor=ifelse(str_detect(Content,'\\([\\+\\-]'),Content, NA)) %>%
mutate(ion_quantity = str_split(ion_quantity, '\\,\\ |\\;|,'),
rich_poor = str_split(rich_poor, '\\,\\ |\\;|,'),
Impurities = str_split(Impurities, '\\,\\ |\\;|,')) %>%
unchop(c('Impurities', 'ion_quantity', 'rich_poor'), keep_empty = TRUE) %>%
# unchop(ion_quantity, keep_empty = TRUE) %>%
# unchop(rich_poor, keep_empty = TRUE) %>%
distinct(Mineral_Name, Impurities, ion_quantity, rich_poor) %>%
filter(Mineral_Name == 'High-Hydrated Si-Deficient Vesuvianite')
View(mineral_impurity)
# parse data
mineral_impurity <- initial %>%
select(Mineral_Name, Impurities, Content) %>%
filter(!is.na(Impurities)) %>%
mutate(ion_quantity=ifelse(str_detect(Content,'[0-9]'),Content, NA),
rich_poor=ifelse(str_detect(Content,'\\([\\+\\-]'),Content, NA)) %>%
mutate(ion_quantity = str_split(ion_quantity, '\\,\\ |\\;|,'),
rich_poor = str_split(rich_poor, '\\,\\ |\\;|,'),
Impurities = str_split(Impurities, '\\,\\ |\\;|,')) %>%
unchop(c('Impurities', 'ion_quantity', 'rich_poor'), keep_empty = TRUE) %>%
distinct(Mineral_Name, Impurities, ion_quantity, rich_poor)
View(mineral_impurity)
# parse data
mineral_impurity <- initial %>%
select(Mineral_Name, Impurities, Content) %>%
filter(!is.na(Impurities)) %>%
mutate(ion_quantity=ifelse(str_detect(Content,'[0-9]'),Content, NA),
rich_poor=ifelse(str_detect(Content,'\\([\\+\\-]'),Content, NA)) %>%
mutate(ion_quantity = str_split(ion_quantity, '\\,\\ |\\;|,'),
rich_poor = str_split(rich_poor, '\\,\\ |\\;|,'),
Impurities = str_split(Impurities, '\\,\\ |\\;|,')) %>%
unchop(c('Impurities', 'ion_quantity', 'rich_poor'), keep_empty = TRUE) %>%
distinct(Mineral_Name, Impurities, ion_quantity, rich_poor) %>%
# filter(Mineral_Name == 'High-Hydrated Si-Deficient Vesuvianite') # For check
mutate(rich_poor=ifelse(str_detect(rich_poor,'\\+'), 1, rich_poor)) %>%
mutate(rich_poor=ifelse(str_detect(rich_poor,'\\-'), 0, rich_poor))
View(mineral_impurity)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE mineral_impurity RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "mineral_impurity", mineral_impurity, append=TRUE)
# parse data
mineral_impurity <- initial %>%
select(Mineral_Name, Impurities, Content) %>%
filter(!is.na(Impurities)) %>%
mutate(ion_quantity=ifelse(str_detect(Content,'[0-9]'),Content, NA),
rich_poor=ifelse(str_detect(Content,'\\([\\+\\-]'),Content, NA)) %>%
mutate(ion_quantity = str_split(ion_quantity, '\\,\\ |\\;|,'),
rich_poor = str_split(rich_poor, '\\,\\ |\\;|,'),
Impurities = str_split(Impurities, '\\,\\ |\\;|,')) %>%
unchop(c('Impurities', 'ion_quantity', 'rich_poor'), keep_empty = TRUE) %>%
distinct(Mineral_Name, Impurities, ion_quantity, rich_poor) %>%
# filter(Mineral_Name == 'High-Hydrated Si-Deficient Vesuvianite') # For check
mutate(rich_poor=ifelse(str_detect(rich_poor,'\\+'), 1, rich_poor)) %>%
mutate(rich_poor=ifelse(str_detect(rich_poor,'\\-'), 0, rich_poor)) %>%
rename(mineral_name=Mineral_Name) %>%
left_join(mineral_list, by='mineral_name', copy=TRUE) %>%
left_join(ion_list, by=c('Impurities' = 'formula'), copy=TRUE) %>%
select(mineral_id, ion_id, ion_quantity, rich_poor)
View(mineral_impurity)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE mineral_impurity RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "mineral_impurity", mineral_impurity, append=TRUE)
# Disconnect from the DB
dbDisconnect(conn)
# Disconnect from the DB
dbDisconnect(conn)
library(tidyverse)
library(googlesheets4)
library(tidyjson)
library(DBI)
library(RCurl)
setwd("~/Dropbox/GP-minerals/R scripts/export_to_SQL/")
rm(list=ls())
path <- 'export/'
source('functions.R')
conn <- dbConnect(RPostgres::Postgres(),dbname = 'postgres',
host = 'master.c6ya4cff5frj.eu-central-1.rds.amazonaws.com',
port = 5432,
user = 'postgres',
password = 'BQBANe++XrmO5xWA3UqipNACx3Mf95kN')
ion_class_list = tbl(conn, 'ion_class_list')
ion_subclass_list = tbl(conn, 'ion_subclass_list')
ion_group_list = tbl(conn, 'ion_group_list')
ion_subgroup_list = tbl(conn, 'ion_subgroup_list')
ion_type_list = tbl(conn, 'ion_type_list')
#Load data ---------------------------------------------------------------------
initial <- googlesheets4::read_sheet(
ss='1FCu3ywv1wVMP6IZjwFezjipXXC74S8hRbLZaNzZCWpg',
sheet = 'Ions_data',
range = 'A:X',
col_names = TRUE,
col_types = 'c',
na = ""
)
variety_of_check <- initial %>%
select(variety_of) %>%
distinct(variety_of) %>%
filter(!is.na(variety_of)) %>%
left_join(initial, by=c('variety_of' = 'formula'))
View(variety_of_check)
initial_ions <- initial %>%
select(formula) %>%
mutate(ion_id=row_number())
initial <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Nickel-Strunz',
range = 'A:N',
col_names = TRUE,
col_types = 'c',
na = ""
)
anions <- initial %>%
select(Mineral_Name, anions_theoretical) %>%
mutate(ion = str_split(anions_theoretical, ';')) %>%
unchop(ion, keep_empty = TRUE) %>% #parse ion level
distinct(ion) %>%
arrange(ion)
ion_list_anions <- ion_list %>%
filter(ion_type_id == 1)
ion_list = tbl(conn, 'ion_list')
mineral_list = tbl(conn, 'mineral_list')
ion_list_anions <- ion_list %>%
filter(ion_type_id == 1)
check_anions <- anions %>%
left_join(ion_list_anions, by=c('ion'='formula'),copy=TRUE) %>%
filter(is.na(ion_id))
View(check_anions)
cations <- initial %>%
select(Mineral_Name, cations_theoretical) %>%
mutate(ion = str_split(cations_theoretical, ';')) %>%
unchop(ion, keep_empty = TRUE) %>% #parse ion level
distinct(ion) %>%
arrange(ion)
ion_list_cations <- ion_list %>%
filter(ion_type_id == 2)
check_cations <- cations %>%
left_join(ion_list_cations, by=c('ion'='formula'),copy=TRUE) %>%
filter(is.na(ion_id))
silicates <- initial %>%
select(Mineral_Name, silicates_theoretical) %>%
mutate(ion = str_split(silicates_theoretical, ';')) %>%
unchop(ion, keep_empty = TRUE) %>% #parse ion level
distinct(ion) %>%
arrange(ion)
ion_list_silicates <- ion_list %>%
filter(ion_type_id == 3)
check_silicates <- silicates %>%
left_join(ion_list, by=c('ion'='formula'),copy=TRUE) %>%
filter(is.na(ion_id))
neutral <- initial %>%
select(Mineral_Name, other_theoretical) %>%
mutate(ion = str_split(other_theoretical, ';')) %>%
unchop(ion, keep_empty = TRUE) %>% #parse ion level
distinct(ion) %>%
arrange(ion)
ion_list_neutral <- ion_list %>%
filter(ion_type_id == 4)
check_neutral <- neutral %>%
left_join(ion_list, by=c('ion'='formula'),copy=TRUE) %>%
filter(is.na(ion_id))
View(check_cations)
#Load data ---------------------------------------------------------------------
initial <- googlesheets4::read_sheet(
ss='1FCu3ywv1wVMP6IZjwFezjipXXC74S8hRbLZaNzZCWpg',
sheet = 'Ions_data',
range = 'A:X',
col_names = TRUE,
col_types = 'c',
na = ""
)
initial_ions <- initial %>%
select(formula) %>%
mutate(ion_id=row_number())
ion_list <- initial %>%
select(ion_type_name, ion_name, formula, formula_with_oxidation, overall_charge, variety_of, expressed_as, element_or_sulfide,
ion_class_name, ion_subclass_name, ion_group_name, ion_subgroup_name, structure_description, geometry) %>%
left_join(ion_type_list, by='ion_type_name', copy=TRUE) %>%
left_join(ion_class_list, by='ion_class_name', copy=TRUE) %>%
left_join(ion_subclass_list, by='ion_subclass_name', copy=TRUE) %>%
left_join(ion_group_list, by='ion_group_name', copy=TRUE) %>%
left_join(ion_subgroup_list, by='ion_subgroup_name', copy=TRUE) %>%
left_join(initial_ions, by=c('variety_of'='formula'), copy=TRUE) %>%
select(ion_type_id, ion_name, formula, formula_with_oxidation, overall_charge, ion_id, expressed_as, element_or_sulfide, ion_class_id, ion_subclass_id,
ion_group_id, ion_subgroup_id, structure_description, geometry) %>%
rename(variety_of = ion_id)
View(ion_list)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE ion_list RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "ion_list", ion_list, append=TRUE)
# Disconnect from the DB
dbDisconnect(conn)
conn <- dbConnect(RPostgres::Postgres(),dbname = 'postgres',
host = 'master.c6ya4cff5frj.eu-central-1.rds.amazonaws.com',
port = 5432,
user = 'postgres',
password = 'BQBANe++XrmO5xWA3UqipNACx3Mf95kN')
ion_list = tbl(conn, 'ion_list')
mineral_list = tbl(conn, 'mineral_list')
#Load data ---------------------------------------------------------------------
initial <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Nickel-Strunz',
range = 'A:N',
col_names = TRUE,
col_types = 'c',
na = ""
)
anions <- initial %>%
select(Mineral_Name, anions_theoretical) %>%
mutate(ion = str_split(anions_theoretical, ';')) %>%
unchop(ion, keep_empty = TRUE) %>% #parse ion level
distinct(ion) %>%
arrange(ion)
ion_list_anions <- ion_list %>%
filter(ion_type_id == 1)
check_anions <- anions %>%
left_join(ion_list_anions, by=c('ion'='formula'),copy=TRUE) %>%
filter(is.na(ion_id))
cations <- initial %>%
select(Mineral_Name, cations_theoretical) %>%
mutate(ion = str_split(cations_theoretical, ';')) %>%
unchop(ion, keep_empty = TRUE) %>% #parse ion level
distinct(ion) %>%
arrange(ion)
ion_list_cations <- ion_list %>%
filter(ion_type_id == 2)
check_cations <- cations %>%
left_join(ion_list_cations, by=c('ion'='formula'),copy=TRUE) %>%
filter(is.na(ion_id))
silicates <- initial %>%
select(Mineral_Name, silicates_theoretical) %>%
mutate(ion = str_split(silicates_theoretical, ';')) %>%
unchop(ion, keep_empty = TRUE) %>% #parse ion level
distinct(ion) %>%
arrange(ion)
ion_list_silicates <- ion_list %>%
filter(ion_type_id == 3)
check_silicates <- silicates %>%
left_join(ion_list, by=c('ion'='formula'),copy=TRUE) %>%
filter(is.na(ion_id))
neutral <- initial %>%
select(Mineral_Name, other_theoretical) %>%
mutate(ion = str_split(other_theoretical, ';')) %>%
unchop(ion, keep_empty = TRUE) %>% #parse ion level
distinct(ion) %>%
arrange(ion)
ion_list_neutral <- ion_list %>%
filter(ion_type_id == 4)
check_neutral <- neutral %>%
left_join(ion_list, by=c('ion'='formula'),copy=TRUE) %>%
filter(is.na(ion_id))
# FINISH CHECK
# Create subsets for ions
anions <- initial %>%
select(Mineral_Name, anions_theoretical) %>%
mutate(formula = str_split(anions_theoretical, ';')) %>%
unchop(formula, keep_empty = TRUE) %>%
left_join(ion_list_anions, by='formula', copy=TRUE) %>%
left_join(mineral_list, by=c('Mineral_Name' = 'mineral_name'), copy=TRUE) %>%
filter(!is.na(ion_id)) %>%
filter(!is.na(mineral_id)) %>%
select(mineral_id, ion_id)
cations <- initial %>%
select(Mineral_Name, cations_theoretical) %>%
mutate(formula = str_split(cations_theoretical, ';')) %>%
unchop(formula, keep_empty = TRUE) %>%
left_join(ion_list_cations, by='formula', copy=TRUE) %>%
left_join(mineral_list, by=c('Mineral_Name' = 'mineral_name'), copy=TRUE) %>%
filter(!is.na(ion_id)) %>%
filter(!is.na(mineral_id)) %>%
select(mineral_id, ion_id)
silicates <- initial %>%
select(Mineral_Name, silicates_theoretical) %>%
mutate(formula = str_split(silicates_theoretical, ';')) %>%
unchop(formula, keep_empty = TRUE) %>%
left_join(ion_list_silicates, by='formula', copy=TRUE) %>%
left_join(mineral_list, by=c('Mineral_Name' = 'mineral_name'), copy=TRUE) %>%
filter(!is.na(ion_id)) %>%
filter(!is.na(mineral_id)) %>%
select(mineral_id, ion_id)
other <- initial %>%
select(Mineral_Name, other_theoretical) %>%
mutate(formula = str_split(other_theoretical, ';')) %>%
unchop(formula, keep_empty = TRUE) %>%
left_join(ion_list_neutral, by='formula', copy=TRUE) %>%
left_join(mineral_list, by=c('Mineral_Name' = 'mineral_name'), copy=TRUE) %>%
filter(!is.na(ion_id)) %>%
filter(!is.na(mineral_id)) %>%
select(mineral_id, ion_id)
mineral_ion_theoretical <- union(anions,cations,silicates,other) %>%
arrange(mineral_id)
View(mineral_ion_theoretical)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE mineral_ion_theoretical RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "mineral_ion_theoretical", mineral_ion_theoretical, append=TRUE)
ion_list = tbl(conn, 'ion_list')
element_list = tbl(conn, 'element_list')
#Load data ---------------------------------------------------------------------
initial <- googlesheets4::read_sheet(
ss='1FCu3ywv1wVMP6IZjwFezjipXXC74S8hRbLZaNzZCWpg',
sheet = 'Ions_data',
range = 'A:H',
col_names = TRUE,
col_types = 'c',
na = ""
)
ion_list_local <-
ion_list %>%
collect()
ion_element <- ion_list_local %>%
select(ion_id, formula) %>%
mutate(element=str_match_all(formula, '[A-Z][a-z]?')) %>%
mutate(element=ifelse(formula=='REE', list(c('Ce', 'Dy', 'Er', 'Eu', 'Gd', 'Ho', 'La', 'Lu', 'Nd', 'Pr', 'Pm', 'Sm', 'Sc', 'Tb', 'Tm', 'Yb', 'Y')), element)) %>%
mutate(element=ifelse(formula=='Ln^3+^', list(c('Ce', 'Dy', 'Er', 'Gd', 'La', 'Nd', 'Pr', 'Sm', 'Yb')), element)) %>%
unchop(element, keep_empty = TRUE) %>%
distinct(ion_id, element) %>%
left_join(element_list, by='element', copy=TRUE) %>%
select(ion_id, element_id)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE ion_element RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "ion_element", ion_element, append=TRUE)
ion_list = tbl(conn, 'ion_list')
mineral_list = tbl(conn, 'mineral_list')
#Load data ---------------------------------------------------------------------
initial <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Status data',
range = 'A:R',
col_names = TRUE,
col_types = 'c',
na = ""
)
ion_list <- ion_list %>% arrange(-ion_type_id)
mineral_impurity <- initial %>%
select(Impurities, Content) %>%
filter(!is.na(Impurities)) %>%
mutate(Impurities = str_split(Impurities, '\\,\\ |\\;|,')) %>%
unchop(Impurities, keep_empty = TRUE) %>%
distinct(Impurities) %>%
arrange(Impurities) %>%
left_join(ion_list, by=c('Impurities' = 'formula'), copy=TRUE) %>%
filter(is.na(ion_id))
# parse data
mineral_impurity <- initial %>%
select(Mineral_Name, Impurities, Content) %>%
filter(!is.na(Impurities)) %>%
mutate(ion_quantity=ifelse(str_detect(Content,'[0-9]'),Content, NA),
rich_poor=ifelse(str_detect(Content,'\\([\\+\\-]'),Content, NA)) %>%
mutate(ion_quantity = str_split(ion_quantity, '\\,\\ |\\;|,'),
rich_poor = str_split(rich_poor, '\\,\\ |\\;|,'),
Impurities = str_split(Impurities, '\\,\\ |\\;|,')) %>%
unchop(c('Impurities', 'ion_quantity', 'rich_poor'), keep_empty = TRUE) %>%
distinct(Mineral_Name, Impurities, ion_quantity, rich_poor) %>%
# filter(Mineral_Name == 'High-Hydrated Si-Deficient Vesuvianite') # For check
mutate(rich_poor=ifelse(str_detect(rich_poor,'\\+'), 1, rich_poor)) %>%
mutate(rich_poor=ifelse(str_detect(rich_poor,'\\-'), 0, rich_poor)) %>%
rename(mineral_name=Mineral_Name) %>%
left_join(mineral_list, by='mineral_name', copy=TRUE) %>%
left_join(ion_list, by=c('Impurities' = 'formula'), copy=TRUE) %>%
select(mineral_id, ion_id, ion_quantity, rich_poor)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE mineral_impurity RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "mineral_impurity", mineral_impurity, append=TRUE)
library(tidyverse)
library(googlesheets4)
library(tidyjson)
library(DBI)
library(RCurl)
setwd("~/Dropbox/GP-minerals/R scripts/export_to_SQL/")
rm(list=ls())
path <- 'export/'
#Load data ---------------------------------------------------------------------
initial <- googlesheets4::read_sheet(
ss='1FCu3ywv1wVMP6IZjwFezjipXXC74S8hRbLZaNzZCWpg',
sheet = 'Elements_data',
range = 'A:AV',
col_names = TRUE,
col_types = 'c',
na = ""
)
conn <- dbConnect(RPostgres::Postgres(),dbname = 'master',
host = 'ec2-18-184-252-245.eu-central-1.compute.amazonaws.com',
port = 5433,
user = 'postgres',
password = 'BQBANe++XrmO5xWA3UqipNACx3Mf95kN')
