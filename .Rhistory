filter(ion_type_id == 1)
ion_check <- initial %>%
select(anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
distinct(anion_subunites) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('formula' = 'anion_subunites'), copy=TRUE) %>%
filter(is.na(ion_id))
ion_check <- initial %>%
select(anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
distinct(anion_subunites) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('formula' = 'anion_subunites'), copy=TRUE)
ion_check <- initial %>%
select(anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
distinct(anion_subunites) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('anion_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
View(ion_check)
ion_check <- initial %>%
select(anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
distinct(anion_subunites) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('anion_subunites'='formula_with_oxidation'), copy=TRUE) %>%
filter(is.na(ion_id))
View(ion_check)
#Load data ---------------------------------------------------------------------
initial <- googlesheets4::read_sheet(
ss='1FCu3ywv1wVMP6IZjwFezjipXXC74S8hRbLZaNzZCWpg',
sheet = 'Ions_data',
range = 'A:X',
col_names = TRUE,
col_types = 'c',
na = ""
)
ion_list_anions <- ion_list %>%
filter(ion_type_id == 1)
ion_check <- initial %>%
select(anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
distinct(anion_subunites) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('anion_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
View(ion_check)
#Load data ---------------------------------------------------------------------
initial <- googlesheets4::read_sheet(
ss='1FCu3ywv1wVMP6IZjwFezjipXXC74S8hRbLZaNzZCWpg',
sheet = 'Ions_data',
range = 'A:X',
col_names = TRUE,
col_types = 'c',
na = ""
)
ion_check <- initial %>%
select(anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
distinct(anion_subunites) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('anion_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
View(ion_check)
#Load data ---------------------------------------------------------------------
initial <- googlesheets4::read_sheet(
ss='1FCu3ywv1wVMP6IZjwFezjipXXC74S8hRbLZaNzZCWpg',
sheet = 'Ions_data',
range = 'A:X',
col_names = TRUE,
col_types = 'c',
na = ""
)
ion_check <- initial %>%
select(anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
distinct(anion_subunites) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('anion_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
ion_list_anions <- ion_list %>%
filter(ion_type_id == 2)
ion_list_cations <- ion_list %>%
filter(ion_type_id == 2)
ion_check <- initial %>%
select(cation_subunites) %>%
mutate(cation_subunites=str_split(cation_subunites, ';')) %>%
unchop(cation_subunites, keep_empty = TRUE) %>%
distinct(cation_subunites) %>%
filter(!is.na(cation_subunites)) %>%
left_join(ion_list_cations, by=c('cation_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
View(ion_check)
#Load data ---------------------------------------------------------------------
initial <- googlesheets4::read_sheet(
ss='1FCu3ywv1wVMP6IZjwFezjipXXC74S8hRbLZaNzZCWpg',
sheet = 'Ions_data',
range = 'A:X',
col_names = TRUE,
col_types = 'c',
na = ""
)
ion_list_cations <- ion_list %>%
filter(ion_type_id == 2)
ion_check <- initial %>%
select(cation_subunites) %>%
mutate(cation_subunites=str_split(cation_subunites, ';')) %>%
unchop(cation_subunites, keep_empty = TRUE) %>%
distinct(cation_subunites) %>%
filter(!is.na(cation_subunites)) %>%
left_join(ion_list_cations, by=c('cation_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
ion_list_silicates <- ion_list %>%
filter(ion_type_id == 3)
ion_check <- initial %>%
select(silicate_subunites) %>%
mutate(silicate_subunites=str_split(silicate_subunites, ';')) %>%
unchop(silicate_subunites, keep_empty = TRUE) %>%
distinct(silicate_subunites) %>%
filter(!is.na(silicate_subunites)) %>%
left_join(ion_list_silicates, by=c('silicate_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
ion_list_other <- ion_list %>%
filter(ion_type_id == 4)
ion_check <- initial %>%
select(other_subunites) %>%
mutate(other_subunites=str_split(other_subunites, ';')) %>%
unchop(other_subunites, keep_empty = TRUE) %>%
distinct(other_subunites) %>%
filter(!is.na(other_subunites)) %>%
left_join(ion_list_other, by=c('other_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
View(ion_check)
ion_list_other
#Load data ---------------------------------------------------------------------
initial <- googlesheets4::read_sheet(
ss='1FCu3ywv1wVMP6IZjwFezjipXXC74S8hRbLZaNzZCWpg',
sheet = 'Ions_data',
range = 'A:X',
col_names = TRUE,
col_types = 'c',
na = ""
)
ion_list_other <- ion_list %>%
filter(ion_type_id == 4)
ion_check <- initial %>%
select(other_subunites) %>%
mutate(other_subunites=str_split(other_subunites, ';')) %>%
unchop(other_subunites, keep_empty = TRUE) %>%
distinct(other_subunites) %>%
filter(!is.na(other_subunites)) %>%
left_join(ion_list_other, by=c('other_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
anions <- initial %>%
select(anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('anion_subunites'='formula'), copy=TRUE)
View(anions)
ion_list_anions
anions <- initial %>%
select(anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('anion_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
View(anions)
ion_list_anions
ion_list_anions <- ion_list %>%
filter(ion_type_id == 1)
ion_list_anions
anions <- initial %>%
select(anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('anion_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
anions <- initial %>%
select(anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('anion_subunites'='formula'), copy=TRUE)
View(anions)
anions <- initial %>%
select(formula, anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('anion_subunites'='formula'), copy=TRUE) %>%
select(formula, ion_id) %>%
rename(subunit_id=ion_id) %>%
left_join(ion_list_anions, by=c('formula'='formula'), copy=TRUE)
View(anions)
anions <- initial %>%
select(formula, anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
filter(!is.na(anion_subunites))
View(anions)
anions <- initial %>%
select(formula, anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('anion_subunites'='formula'), copy=TRUE) %>%
select(formula, ion_id) %>%
rename(subunit_id=ion_id) %>%
left_join(ion_list, by=c('formula'='formula'), copy=TRUE) %>%
cations <- initial %>%
select(cation_subunites) %>%
mutate(cation_subunites=str_split(cation_subunites, ';')) %>%
unchop(cation_subunites, keep_empty = TRUE) %>%
distinct(cation_subunites) %>%
filter(!is.na(cation_subunites)) %>%
left_join(ion_list_cations, by=c('cation_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
anions <- initial %>%
select(formula, anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('anion_subunites'='formula'), copy=TRUE) %>%
select(formula, ion_id) %>%
rename(subunit_id=ion_id) %>%
left_join(ion_list, by=c('formula'='formula'), copy=TRUE)
View(anions)
ion_list %>%
group_by(formula) %>%
filter(n() > 1)
test <- ion_list %>%
group_by(formula) %>%
filter(n() > 1)
View(test)
test$formula
test
test[1]
test[2]
test
test <- ion_list %>%
group_by(formula) %>%
filter(n() > 1) %>%
select(formula)
test
test <- ion_list %>%
group_by(formula) %>%
filter(n() > 1) %>%
select(formula) %>%
distinct(formula)
test
head(test)
test
View(test)
copy_to(test1, test)
copy_to(test, test)
copy_to(test, test1)
test$formula
summarise(test)
test <- ion_list %>%
group_by(formula) %>%
filter(n() > 1) %>%
select(formula) %>%
distinct(formula)
rbind(test)
ion_list %>%
group_by(formula) %>%
filter(n() > 1) %>%
select(formula) %>%
distinct(formula)
anions <- initial %>%
select(anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
distinct(anion_subunites) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('anion_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
anions <- initial %>%
select(formula, anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('anion_subunites'='formula'), copy=TRUE) %>%
select(formula, ion_id) %>%
rename(subunit_id=ion_id) %>%
left_join(ion_list, by=c('formula'='formula'), copy=TRUE) %>%
select()
anions <- initial %>%
select(formula, anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('anion_subunites'='formula'), copy=TRUE) %>%
select(formula, ion_id) %>%
rename(subunit_id=ion_id) %>%
left_join(ion_list, by=c('formula'='formula'), copy=TRUE) %>%
select(ion_id, subunit_id)
View(anions)
cations <- initial %>%
select(formula, cation_subunites) %>%
mutate(anion_subunites=str_split(cation_subunites, ';')) %>%
unchop(cation_subunites, keep_empty = TRUE) %>%
filter(!is.na(cation_subunites)) %>%
left_join(ion_list_cations, by=c('cation_subunites'='formula'), copy=TRUE) %>%
select(formula, ion_id) %>%
rename(subunit_id=ion_id) %>%
left_join(ion_list, by=c('formula'='formula'), copy=TRUE) %>%
select(ion_id, subunit_id)
View(cations)
cations <- initial %>%
select(formula, cation_subunites) %>%
mutate(anion_subunites=str_split(cation_subunites, ';')) %>%
unchop(cation_subunites, keep_empty = TRUE) %>%
filter(!is.na(cation_subunites))
View(cations)
View(cations)
cations <- initial %>%
select(formula, cation_subunites) %>%
mutate(cation_subunites=str_split(cation_subunites, ';')) %>%
unchop(cation_subunites, keep_empty = TRUE) %>%
filter(!is.na(cation_subunites)) %>%
left_join(ion_list_cations, by=c('cation_subunites'='formula'), copy=TRUE) %>%
select(formula, ion_id) %>%
rename(subunit_id=ion_id) %>%
left_join(ion_list, by=c('formula'='formula'), copy=TRUE) %>%
select(ion_id, subunit_id)
View(cations)
silicates <- initial %>%
select(formula, silicate_subunites) %>%
mutate(silicate_subunites=str_split(silicate_subunites, ';')) %>%
unchop(silicate_subunites, keep_empty = TRUE) %>%
filter(!is.na(silicate_subunites)) %>%
left_join(ion_list_silicates, by=c('silicate_subunites'='formula'), copy=TRUE) %>%
select(formula, ion_id) %>%
rename(subunit_id=ion_id) %>%
left_join(ion_list, by=c('formula'='formula'), copy=TRUE) %>%
select(ion_id, subunit_id)
View(silicates)
other <- initial %>%
select(formula, other_subunites) %>%
mutate(other_subunites=str_split(other_subunites, ';')) %>%
unchop(other_subunites, keep_empty = TRUE) %>%
filter(!is.na(other_subunites)) %>%
left_join(ion_list_other, by=c('other_subunites'='formula'), copy=TRUE) %>%
select(formula, ion_id) %>%
rename(subunit_id=ion_id) %>%
left_join(ion_list, by=c('formula'='formula'), copy=TRUE) %>%
select(ion_id, subunit_id)
View(other)
ion_subunit <- union(anions, cations, silicates, other) %>%
arrange(ion_id)
View(ion_subunit)
ion_subunit <- union(anions, cations, silicates, other) %>%
arrange(ion_id, subunit_id)
View(ion_subunit)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE ion_subunit RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "ion_subunit", ion_subunit, append=TRUE)
# Disconnect from the DB
dbDisconnect(conn)
# Disconnect from the DB
dbDisconnect(conn)
library(tidyverse)
library(googlesheets4)
library(tidyjson)
library(DBI)
library(RCurl)
setwd("~/Dropbox/GP-minerals/R scripts/export_to_SQL/")
rm(list=ls())
path <- 'export/'
source('functions.R')
conn <- dbConnect(RPostgres::Postgres(),dbname = 'postgres',
host = 'master.c6ya4cff5frj.eu-central-1.rds.amazonaws.com',
port = 5432,
user = 'postgres',
password = 'BQBANe++XrmO5xWA3UqipNACx3Mf95kN')
ion_list = tbl(conn, 'ion_list')
element_list = tbl(conn, 'element_list')
element_list
#Load data ---------------------------------------------------------------------
initial <- googlesheets4::read_sheet(
ss='1FCu3ywv1wVMP6IZjwFezjipXXC74S8hRbLZaNzZCWpg',
sheet = 'Ions_data',
range = 'A:H',
col_names = TRUE,
col_types = 'c',
na = ""
)
ion_list %>%
select(formula)
ion_element <- ion_list %>%
select(ion_id, formula) %>%
mutate(element=str_match_all(formula, '[A-Z][a-z]?'))
ion_element
# Parse ions ----------------------------------------------------------------
ion_list_local <- ion_list
# Parse ions ----------------------------------------------------------------
ion_list_local <- ion_list %>% select()
# Parse ions ----------------------------------------------------------------
ion_list_local = ion_list %>% select()
# Parse ions ----------------------------------------------------------------
ion_list_local == ion_list %>% select()
# Parse ions ----------------------------------------------------------------
ion_list_local <<- ion_list %>% select()
?tbl
?copy_to
# Parse ions ----------------------------------------------------------------
ion_list_local <- ion_list %>% collect()
ion_element <- ion_list %>%
select(ion_id, formula) %>%
mutate(element=str_match_all(formula, '[A-Z][a-z]?'))
ion_element <- ion_list_local %>%
select(ion_id, formula) %>%
mutate(element=str_match_all(formula, '[A-Z][a-z]?'))
View(ion_element)
ion_element <- ion_list_local %>%
select(ion_id, formula) %>%
mutate(element=unique(str_match_all(formula, '[A-Z][a-z]?')))
ion_element
ion_element <- ion_list_local %>%
select(ion_id, formula) %>%
mutate(element=str_match_all(formula, '[A-Z][a-z]?')) %>%
mutate(element=ifelse(formula=='REE', c('Ce', 'Dy', 'Er', 'Eu', 'Gd', 'Ho', 'La', 'Lu', 'Nd', 'Pr', 'Pm', 'Sm', 'Sc', 'Tb', 'Tm', 'Yb', 'Y'),element))
View(ion_element)
ion_element <- ion_list_local %>%
select(ion_id, formula) %>%
mutate(element=str_match_all(formula, '[A-Z][a-z]?')) %>%
mutate(element=ifelse(formula=='REE', c('Ce', 'Dy', 'Er', 'Eu', 'Gd', 'Ho', 'La', 'Lu', 'Nd', 'Pr', 'Pm', 'Sm', 'Sc', 'Tb', 'Tm', 'Yb', 'Y'), element))
ion_element <- ion_list_local %>%
select(ion_id, formula) %>%
mutate(element=str_match_all(formula, '[A-Z][a-z]?')) %>%
mutate(element=ifelse(formula=='REE', list('Ce', 'Dy', 'Er', 'Eu', 'Gd', 'Ho', 'La', 'Lu', 'Nd', 'Pr', 'Pm', 'Sm', 'Sc', 'Tb', 'Tm', 'Yb', 'Y'), element))
View(ion_element)
ion_element <- ion_list_local %>%
select(ion_id, formula) %>%
mutate(element=str_match_all(formula, '[A-Z][a-z]?')) %>%
mutate(element=ifelse(formula=='REE', element, list('Ce', 'Dy', 'Er', 'Eu', 'Gd', 'Ho', 'La', 'Lu', 'Nd', 'Pr', 'Pm', 'Sm', 'Sc', 'Tb', 'Tm', 'Yb', 'Y')))
View(ion_element)
ion_element
ion_element[2]
ion_element$element
ion_element$element[[2]]
ion_element$element[[3]]
ion_element$element
View(ion_element)
ion_element <- ion_list_local %>%
select(ion_id, formula) %>%
mutate(element=str_match_all(formula, '[A-Z][a-z]?')) %>%
mutate(element=ifelse(formula=='REE', c('Ce', 'Dy', 'Er', 'Eu', 'Gd', 'Ho', 'La', 'Lu', 'Nd', 'Pr', 'Pm', 'Sm', 'Sc', 'Tb', 'Tm', 'Yb', 'Y'), element))
View(ion_element)
ion_element$element[[8]]
View(ion_element)
typeof(ion_element$element[[8]])
ion_element$element[8]
typeof(ion_element$element[8])
ion_element <- ion_list_local %>%
select(ion_id, formula) %>%
mutate(element=str_match_all(formula, '[A-Z][a-z]?')) %>%
mutate(element=ifelse(formula=='REE', list(c('Ce', 'Dy', 'Er', 'Eu', 'Gd', 'Ho', 'La', 'Lu', 'Nd', 'Pr', 'Pm', 'Sm', 'Sc', 'Tb', 'Tm', 'Yb', 'Y')), element)) %>%
mutate(element=ifelse(formula=='Ln^3+^', c('Ce', 'Dy', 'Er', 'Eu', 'Gd', 'Ho', 'La', 'Lu', 'Nd', 'Pr', 'Pm', 'Sm', 'Sc', 'Tb', 'Tm', 'Yb', 'Y'), element))
View(ion_element)
ion_element <- ion_list_local %>%
select(ion_id, formula) %>%
mutate(element=str_match_all(formula, '[A-Z][a-z]?')) %>%
mutate(element=ifelse(formula=='REE', list(c('Ce', 'Dy', 'Er', 'Eu', 'Gd', 'Ho', 'La', 'Lu', 'Nd', 'Pr', 'Pm', 'Sm', 'Sc', 'Tb', 'Tm', 'Yb', 'Y')), element)) %>%
mutate(element=ifelse(formula=='Ln^3+^', list(c('Ce', 'Dy', 'Er', 'Eu', 'Gd', 'Ho', 'La', 'Lu', 'Nd', 'Pr', 'Pm', 'Sm', 'Sc', 'Tb', 'Tm', 'Yb', 'Y')), element))
View(ion_element)
ion_element <- ion_list_local %>%
select(ion_id, formula) %>%
mutate(element=str_match_all(formula, '[A-Z][a-z]?')) %>%
mutate(element=ifelse(formula=='REE', list(c('Ce', 'Dy', 'Er', 'Eu', 'Gd', 'Ho', 'La', 'Lu', 'Nd', 'Pr', 'Pm', 'Sm', 'Sc', 'Tb', 'Tm', 'Yb', 'Y')), element)) %>%
mutate(element=ifelse(formula=='Ln^3+^', list(c('Ce', 'Dy', 'Er', 'Gd', 'La', 'Nd', 'Pr', 'Sm', 'Yb')), element))
View(ion_element)
ion_element <- ion_list_local %>%
select(ion_id, formula) %>%
mutate(element=str_match_all(formula, '[A-Z][a-z]?')) %>%
mutate(element=ifelse(formula=='REE', list(c('Ce', 'Dy', 'Er', 'Eu', 'Gd', 'Ho', 'La', 'Lu', 'Nd', 'Pr', 'Pm', 'Sm', 'Sc', 'Tb', 'Tm', 'Yb', 'Y')), element)) %>%
mutate(element=ifelse(formula=='Ln^3+^', list(c('Ce', 'Dy', 'Er', 'Gd', 'La', 'Nd', 'Pr', 'Sm', 'Yb')), element)) %>%
unchop(element, keep_empty = TRUE) %>%
distinct(ion_id, element)
View(ion_element)
ion_element <- ion_list_local %>%
select(ion_id, formula) %>%
mutate(element=str_match_all(formula, '[A-Z][a-z]?')) %>%
mutate(element=ifelse(formula=='REE', list(c('Ce', 'Dy', 'Er', 'Eu', 'Gd', 'Ho', 'La', 'Lu', 'Nd', 'Pr', 'Pm', 'Sm', 'Sc', 'Tb', 'Tm', 'Yb', 'Y')), element)) %>%
mutate(element=ifelse(formula=='Ln^3+^', list(c('Ce', 'Dy', 'Er', 'Gd', 'La', 'Nd', 'Pr', 'Sm', 'Yb')), element))
View(ion_element)
ion_element <- ion_list_local %>%
select(ion_id, formula) %>%
mutate(element=str_match_all(formula, '[A-Z][a-z]?')) %>%
mutate(element=ifelse(formula=='REE', list(c('Ce', 'Dy', 'Er', 'Eu', 'Gd', 'Ho', 'La', 'Lu', 'Nd', 'Pr', 'Pm', 'Sm', 'Sc', 'Tb', 'Tm', 'Yb', 'Y')), element)) %>%
mutate(element=ifelse(formula=='Ln^3+^', list(c('Ce', 'Dy', 'Er', 'Gd', 'La', 'Nd', 'Pr', 'Sm', 'Yb')), element)) %>%
unchop(element, keep_empty = TRUE) %>%
distinct(ion_id, element) %>%
left_join(element_list, by='element', copy=TRUE) %>%
select(ion_id, element_id)
View(ion_element)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE ion_element RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "ion_element", ion_element, append=TRUE)
