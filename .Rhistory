select(anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
distinct(anion_subunites) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('anion_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
ion_list_cations <- ion_list %>%
filter(ion_type_id == 2)
cations <- initial %>%
select(cation_subunites) %>%
mutate(cation_subunites=str_split(cation_subunites, ';')) %>%
unchop(cation_subunites, keep_empty = TRUE) %>%
distinct(cation_subunites) %>%
filter(!is.na(cation_subunites)) %>%
left_join(ion_list_cations, by=c('cation_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
ion_list_silicates <- ion_list %>%
filter(ion_type_id == 3)
silicates <- initial %>%
select(silicate_subunites) %>%
mutate(silicate_subunites=str_split(silicate_subunites, ';')) %>%
unchop(silicate_subunites, keep_empty = TRUE) %>%
distinct(silicate_subunites) %>%
filter(!is.na(silicate_subunites)) %>%
left_join(ion_list_silicates, by=c('silicate_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
ion_list_other <- ion_list %>%
filter(ion_type_id == 4)
other <- initial %>%
select(other_subunites) %>%
mutate(other_subunites=str_split(other_subunites, ';')) %>%
unchop(other_subunites, keep_empty = TRUE) %>%
distinct(other_subunites) %>%
filter(!is.na(other_subunites)) %>%
left_join(ion_list_other, by=c('other_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
anions <- initial %>%
select(formula, anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('anion_subunites'='formula'), copy=TRUE) %>%
select(formula, ion_id) %>%
rename(subunit_id=ion_id) %>%
left_join(ion_list, by=c('formula'='formula'), copy=TRUE) %>%
select(ion_id, subunit_id)
cations <- initial %>%
select(formula, cation_subunites) %>%
mutate(cation_subunites=str_split(cation_subunites, ';')) %>%
unchop(cation_subunites, keep_empty = TRUE) %>%
filter(!is.na(cation_subunites)) %>%
left_join(ion_list_cations, by=c('cation_subunites'='formula'), copy=TRUE) %>%
select(formula, ion_id) %>%
rename(subunit_id=ion_id) %>%
left_join(ion_list, by=c('formula'='formula'), copy=TRUE) %>%
select(ion_id, subunit_id)
silicates <- initial %>%
select(formula, silicate_subunites) %>%
mutate(silicate_subunites=str_split(silicate_subunites, ';')) %>%
unchop(silicate_subunites, keep_empty = TRUE) %>%
filter(!is.na(silicate_subunites)) %>%
left_join(ion_list_silicates, by=c('silicate_subunites'='formula'), copy=TRUE) %>%
select(formula, ion_id) %>%
rename(subunit_id=ion_id) %>%
left_join(ion_list, by=c('formula'='formula'), copy=TRUE) %>%
select(ion_id, subunit_id)
other <- initial %>%
select(formula, other_subunites) %>%
mutate(other_subunites=str_split(other_subunites, ';')) %>%
unchop(other_subunites, keep_empty = TRUE) %>%
filter(!is.na(other_subunites)) %>%
left_join(ion_list_other, by=c('other_subunites'='formula'), copy=TRUE) %>%
select(formula, ion_id) %>%
rename(subunit_id=ion_id) %>%
left_join(ion_list, by=c('formula'='formula'), copy=TRUE) %>%
select(ion_id, subunit_id)
ion_subunit <- union(anions, cations, silicates, other) %>%
arrange(ion_id, subunit_id)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE ion_subunit RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "ion_subunit", ion_subunit, append=TRUE)
library(tidyverse)
library(googlesheets4)
library(tidyjson)
library(DBI)
library(RCurl)
setwd("~/Dropbox/GP-minerals/R scripts/export_to_SQL/")
rm(list=ls())
path <- 'export/'
source('functions.R')
conn <- dbConnect(RPostgres::Postgres(),dbname = 'postgres',
host = 'master.c6ya4cff5frj.eu-central-1.rds.amazonaws.com',
port = 5432,
user = 'postgres',
password = 'BQBANe++XrmO5xWA3UqipNACx3Mf95kN')
initial <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Names data',
range = 'A:AK',
col_names = TRUE,
col_types = 'c',
na = ""
)
country_list <- tbl(conn, 'country_list')
mineral_list = tbl(conn, 'mineral_list')
# PROCESS DATA -----------------------------------------------------------------
ms_names_institution <- initial %>%
filter(!is.na(`GROUP/INSTITUTION`)) %>%
select(Mineral_Name, `GROUP/INSTITUTION`, About, Nationality__1)
# COMPARE WITH languages_list --------- OMIT THIS STEP !!!!! -------------------
countries_bugs <- ms_names_institution %>%
anti_join(countries_list, by = c('Nationality__1' = 'name'), copy=TRUE)
# COMPARE WITH languages_list --------- OMIT THIS STEP !!!!! -------------------
countries_bugs <- ms_names_institution %>%
anti_join(country_list, by = c('Nationality__1' = 'name'), copy=TRUE)
# COMPARE WITH languages_list --------- OMIT THIS STEP !!!!! -------------------
countries_bugs <- ms_names_institution %>%
anti_join(country_list, by = c('Nationality__1' = 'country_name'), copy=TRUE)
# replace countries names with ids
ms_names_institution <-
ms_names_institution %>%
left_join(country_list, by=c('Nationality__1' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, `GROUP/INSTITUTION`, About, id) %>%
rename(name=Mineral_Name, institution_name = `GROUP/INSTITUTION`, note=About, country_id=id) %>%
left_join(mineral_list, by=c('name'='mineral_name'), copy=TRUE) %>%
rename(note=note.x) %>%
select(mineral_id, institution_name, note, country_id)
# replace countries names with ids
ms_names_institution <-
ms_names_institution %>%
left_join(country_list, by=c('Nationality__1' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, `GROUP/INSTITUTION`, About, country_id) %>%
rename(name=Mineral_Name, institution_name = `GROUP/INSTITUTION`, note=About) %>%
left_join(mineral_list, by=c('name'='mineral_name'), copy=TRUE) %>%
rename(note=note.x) %>%
select(mineral_id, institution_name, note, country_id)
View(ms_names_institution)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE mineral_name_institution RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "mineral_name_institution", mineral_name_institution, append=TRUE)
# replace countries names with ids
mineral_name_institution <-
ms_names_institution %>%
left_join(country_list, by=c('Nationality__1' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, `GROUP/INSTITUTION`, About, country_id) %>%
rename(name=Mineral_Name, institution_name = `GROUP/INSTITUTION`, note=About) %>%
left_join(mineral_list, by=c('name'='mineral_name'), copy=TRUE) %>%
rename(note=note.x) %>%
select(mineral_id, institution_name, note, country_id)
# replace countries names with ids
mineral_name_institution <-
mineral_name_institution %>%
left_join(country_list, by=c('Nationality__1' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, `GROUP/INSTITUTION`, About, country_id) %>%
rename(name=Mineral_Name, institution_name = `GROUP/INSTITUTION`, note=About) %>%
left_join(mineral_list, by=c('name'='mineral_name'), copy=TRUE) %>%
rename(note=note.x) %>%
select(mineral_id, institution_name, note, country_id)
# PROCESS DATA -----------------------------------------------------------------
mineral_name_institution <- initial %>%
filter(!is.na(`GROUP/INSTITUTION`)) %>%
select(Mineral_Name, `GROUP/INSTITUTION`, About, Nationality__1)
# replace countries names with ids
mineral_name_institution <-
mineral_name_institution %>%
left_join(country_list, by=c('Nationality__1' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, `GROUP/INSTITUTION`, About, country_id) %>%
rename(name=Mineral_Name, institution_name = `GROUP/INSTITUTION`, note=About) %>%
left_join(mineral_list, by=c('name'='mineral_name'), copy=TRUE) %>%
rename(note=note.x) %>%
select(mineral_id, institution_name, note, country_id)
View(mineral_name_institution)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE mineral_name_institution RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "mineral_name_institution", mineral_name_institution, append=TRUE)
library(tidyverse)
library(googlesheets4)
library(tidyjson)
library(DBI)
setwd("~/Dropbox/GP-minerals/R scripts/export_to_SQL/")
rm(list=ls())
path <- 'export/'
source('functions.R')
conn <- dbConnect(RPostgres::Postgres(),dbname = 'postgres',
host = 'master.c6ya4cff5frj.eu-central-1.rds.amazonaws.com',
port = 5432,
user = 'postgres',
password = 'BQBANe++XrmO5xWA3UqipNACx3Mf95kN')
#Load data ---------------------------------------------------------------------
initial <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Names data',
range = 'A:AV',
col_names = TRUE,
col_types = 'c',
na = ""
)
mineral_name <- tbl(conn, 'mineral_name')
locality_type_list <- tbl(conn, 'locality_type_list')
mineral_list <- tbl(conn, 'mineral_list')
locality_type_list <- tbl(conn, 'locality_type_list')
locality_type_list <- tbl(conn, 'locality_type_list')
mineral_name_locality <- initial %>%
select(Mineral_Name, LOCALITY, Type, Note) %>%
filter(!is.na(LOCALITY)) %>%
left_join(locality_type_list, by = c('Type' = 'locality_type_name'), copy = TRUE) %>%
select(-c(id, note)) %>%
left_join(mineral_list, by=c('Mineral_Name'='mineral_name'), copy=TRUE)
mineral_name_locality <- initial %>%
select(Mineral_Name, LOCALITY, Type, Note) %>%
filter(!is.na(LOCALITY)) %>%
left_join(locality_type_list, by = c('Type' = 'locality_type_name'), copy = TRUE) %>%
select(-c( note))
View(mineral_name_locality)
mineral_name_locality <- initial %>%
select(Mineral_Name, LOCALITY, Type, Note) %>%
filter(!is.na(LOCALITY)) %>%
left_join(locality_type_list, by = c('Type' = 'locality_type_name'), copy = TRUE) %>%
select(-c( note)) %>%
left_join(mineral_list, by=c('Mineral_Name'='mineral_name'), copy=TRUE) %>%
filter(!is.na(mineral_id))
mineral_name_locality <- initial %>%
select(Mineral_Name, LOCALITY, Type, Note) %>%
filter(!is.na(LOCALITY)) %>%
left_join(locality_type_list, by = c('Type' = 'locality_type_name'), copy = TRUE) %>%
select(-c( note)) %>%
left_join(mineral_list, by=c('Mineral_Name'='mineral_name'), copy=TRUE)
mineral_name_locality <- initial %>%
select(Mineral_Name, LOCALITY, Type, Note) %>%
filter(!is.na(LOCALITY)) %>%
left_join(locality_type_list, by = c('Type' = 'locality_type_name'), copy = TRUE) %>%
select(-c( note)) %>%
left_join(mineral_list, by=c('Mineral_Name'='mineral_name'), copy=TRUE) %>%
filter(!is.na(locality_type_id))
mineral_name_locality <- initial %>%
select(Mineral_Name, LOCALITY, Type, Note) %>%
filter(!is.na(LOCALITY)) %>%
left_join(locality_type_list, by = c('Type' = 'locality_type_name'), copy = TRUE) %>%
select(-c( note)) %>%
left_join(mineral_list, by=c('Mineral_Name'='mineral_name'), copy=TRUE) %>%
filter(!is.na(mineral_id))
# PROCESS DATA -----------------------------------------------------------------
mineral_name_locality <- initial %>%
select(Mineral_Name, LOCALITY, Type, Note) %>%
filter(!is.na(LOCALITY)) %>%
left_join(locality_type_list, by = c('Type' = 'locality_type_name'), copy = TRUE) %>%
select(-c( note)) %>%
left_join(mineral_list, by=c('Mineral_Name'='mineral_name'), copy=TRUE) %>%
filter(!is.na(mineral_id)) %>% # COMPARE MINERALS WITH MASTER TABLE !
select(mineral_id, LOCALITY, locality_type_id, Note) %>%
rename(locality_name=LOCALITY, note=Note)
View(mineral_name_locality)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE mineral_name_locality RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "mineral_name_locality", mineral_name_locality, append=TRUE)
# Disconnect from the DB
dbDisconnect(conn)
library(tidyverse)
library(googlesheets4)
library(tidyjson)
library(DBI)
setwd("~/Dropbox/GP-minerals/R scripts/export_to_SQL/")
rm(list=ls())
path <- 'export/'
source('functions.R')
conn <- dbConnect(RPostgres::Postgres(),dbname = 'postgres',
host = 'master.c6ya4cff5frj.eu-central-1.rds.amazonaws.com',
port = 5432,
user = 'postgres',
password = 'BQBANe++XrmO5xWA3UqipNACx3Mf95kN')
#Load data ---------------------------------------------------------------------
initial <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Names data',
range = 'A:AV',
col_names = TRUE,
col_types = 'c',
na = ""
)
mineral_list <- tbl(conn, 'mineral_list')
countries_list <- tbl(conn, 'countries_list')
mineral_list <- tbl(conn, 'mineral_list')
country_list <- tbl(conn, 'country_list')
# PROCESS DATA -----------------------------------------------------------------
mineral_name_locality_country <- initial %>%
select(Mineral_Name, Country) %>%
filter(!is.na(Country)) %>%
mutate(Country = str_split(Country, ';')) %>%
unchop(Country, keep_empty = TRUE) %>%
left_join(countries_list, by = c('Country' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, country_id) %>%
left_join(ms_species, by=c('Mineral_Name'='mineral_name'), copy=TRUE)
mineral_name_locality_country <- initial %>%
select(Mineral_Name, Country) %>%
filter(!is.na(Country)) %>%
mutate(Country = str_split(Country, ';')) %>%
unchop(Country, keep_empty = TRUE) %>%
left_join(country_list, by = c('Country' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, country_id) %>%
left_join(ms_species, by=c('Mineral_Name'='mineral_name'), copy=TRUE)
# PROCESS DATA -----------------------------------------------------------------
mineral_name_locality_country <- initial %>%
select(Mineral_Name, Country) %>%
filter(!is.na(Country)) %>%
mutate(Country = str_split(Country, ';')) %>%
unchop(Country, keep_empty = TRUE) %>%
left_join(country_list, by = c('Country' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, country_id) %>%
left_join(mineral_list, by=c('Mineral_Name'='mineral_name'), copy=TRUE)
mineral_name_locality_country <- initial %>%
select(Mineral_Name, Country) %>%
filter(!is.na(Country)) %>%
mutate(Country = str_split(Country, ';')) %>%
unchop(Country, keep_empty = TRUE) %>%
left_join(country_list, by = c('Country' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, country_id) %>%
left_join(mineral_list, by=c('Mineral_Name'='mineral_name'), copy=TRUE) %>%
filter(!is.na(mineral_id))
# PROCESS DATA -----------------------------------------------------------------
mineral_name_locality_country <- initial %>%
select(Mineral_Name, Country) %>%
filter(!is.na(Country)) %>%
mutate(Country = str_split(Country, ';')) %>%
unchop(Country, keep_empty = TRUE) %>%
left_join(country_list, by = c('Country' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, country_id) %>%
left_join(mineral_list, by=c('Mineral_Name'='mineral_name'), copy=TRUE) %>%
filter(!is.na(mineral_id)) %>% # COMPARE MINERALS WITH MASTER TABLE !
select(mineral_id, country_id)
View(mineral_name_locality_country)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE mineral_name_locality RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "mineral_name_locality", mineral_name_locality, append=TRUE)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE mineral_name_locality_country RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "mineral_name_locality_country", mineral_name_locality_country, append=TRUE)
mineral_list <- tbl(conn, 'mineral_list')
locality_type_list <- tbl(conn, 'locality_type_list')
# PROCESS DATA -----------------------------------------------------------------
mineral_name_locality <- initial %>%
select(Mineral_Name, LOCALITY, Type, Note) %>%
filter(!is.na(LOCALITY)) %>%
left_join(locality_type_list, by = c('Type' = 'locality_type_name'), copy = TRUE) %>%
select(-c( note)) %>%
left_join(mineral_list, by=c('Mineral_Name'='mineral_name'), copy=TRUE) %>%
filter(!is.na(mineral_id)) %>% # COMPARE MINERALS WITH MASTER TABLE !
select(mineral_id, LOCALITY, locality_type_id, Note) %>%
rename(locality_name=LOCALITY, note=Note)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE mineral_name_locality RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "mineral_name_locality", mineral_name_locality, append=TRUE)
mineral_name_locality <- tbl(conn, 'mineral_name_locality')
?tbl
library(tidyverse)
library(googlesheets4)
library(tidyjson)
library(DBI)
setwd("~/Dropbox/GP-minerals/R scripts/export_to_SQL/")
rm(list=ls())
path <- 'export/'
source('functions.R')
conn <- dbConnect(RPostgres::Postgres(),dbname = 'postgres',
host = 'master.c6ya4cff5frj.eu-central-1.rds.amazonaws.com',
port = 5432,
user = 'postgres',
password = 'BQBANe++XrmO5xWA3UqipNACx3Mf95kN')
mineral_name_locality <- dbGetQuery(con, "SELECT ml.mineral_name, mnl.id
FROM mineral_name_locality mnl INNER JOIN mineral_list ml on mnl.mineral_id = mnl.mineral_id;")
mineral_name_locality <- dbGetQuery(conn, "SELECT ml.mineral_name, mnl.id
FROM mineral_name_locality mnl INNER JOIN mineral_list ml on mnl.mineral_id = mnl.mineral_id;")
mineral_name_locality <- dbGetQuery(conn, "SELECT ml.mineral_name, mnl.id
FROM mineral_name_locality mnl INNER JOIN mineral_list ml on mnl.mineral_id = mnl.mineral_id;")
dbFetch(mineral_name_locality)
mineral_name_locality <- dbSendQuery(conn, "SELECT ml.mineral_name, mnl.id
FROM mineral_name_locality mnl INNER JOIN mineral_list ml on mnl.mineral_id = mnl.mineral_id;")
mineral_name_locality
dbFetch(mineral_name_locality)
a<-dbFetch(mineral_name_locality)
mineral_name_locality
mineral_name_locality <- dbSendQuery(conn, "SELECT ml.mineral_name, mnl.id FROM mineral_name_locality mnl INNER JOIN mineral_list ml on ml.mineral_id = mnl.mineral_id;")
dbFetch(mineral_name_locality)
mineral_name_locality
mineral_name_locality <- dbFetch(mineral_name_locality)
mineral_name_locality <- dbSendQuery(conn, "SELECT ml.mineral_name, mnl.id FROM
mineral_name_locality mnl INNER JOIN mineral_list ml on ml.mineral_id = mnl.mineral_id;")
mineral_name_locality <- dbFetch(mineral_name_locality)
View(mineral_name_locality)
mineral_name_locality <- dbSendQuery(conn, "SELECT ml.mineral_name, mnl.id FROM
mineral_name_locality mnl INNER JOIN mineral_list ml on ml.mineral_id = mnl.mineral_id;")
mineral_name_locality <- dbFetch(mineral_name_locality) %>%
arrange(mineral_name)
View(mineral_name_locality)
mineral_name_locality <- dbSendQuery(conn, "SELECT ml.mineral_name, mnl.id FROM
mineral_name_locality mnl INNER JOIN mineral_list ml on ml.mineral_id = mnl.mineral_id;") %>%
dbFetch(mineral_name_locality) %>%
arrange(mineral_name)
rm(mineral_name_locality)
mineral_name_locality <- dbSendQuery(conn, "SELECT ml.mineral_name, mnl.id FROM
mineral_name_locality mnl INNER JOIN mineral_list ml on ml.mineral_id = mnl.mineral_id;") %>%
dbFetch(mineral_name_locality) %>%
arrange(mineral_name)
mineral_name_locality <- dbSendQuery(conn, "SELECT ml.mineral_name, mnl.id FROM
mineral_name_locality mnl INNER JOIN mineral_list ml on ml.mineral_id = mnl.mineral_id;") %>%
dbFetch() %>%
arrange(mineral_name)
View(mineral_name_locality)
# PROCESS DATA -----------------------------------------------------------------
mineral_name_locality_country <- initial %>%
select(Mineral_Name, Country) %>%
filter(!is.na(Country)) %>%
mutate(Country = str_split(Country, ';')) %>%
unchop(Country, keep_empty = TRUE) %>%
left_join(country_list, by = c('Country' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, country_id) %>%
left_join(mineral_name_locality, by=c('Mineral_Name'='mineral_name'), copy=TRUE) %>%
filter(!is.na(mineral_id)) %>% # COMPARE MINERALS WITH MASTER TABLE !
rename(name_locality_id=id) %>%
select(mineral_id, country_id)
initial <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Names data',
range = 'A:AV',
col_names = TRUE,
col_types = 'c',
na = ""
)
mineral_name_locality_country <- initial %>%
select(Mineral_Name, Country) %>%
filter(!is.na(Country)) %>%
mutate(Country = str_split(Country, ';')) %>%
unchop(Country, keep_empty = TRUE) %>%
left_join(country_list, by = c('Country' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, country_id) %>%
left_join(mineral_name_locality, by=c('Mineral_Name'='mineral_name'), copy=TRUE)
country_list <- tbl(conn, 'country_list')
# PROCESS DATA -----------------------------------------------------------------
mineral_name_locality_country <- initial %>%
select(Mineral_Name, Country) %>%
filter(!is.na(Country)) %>%
mutate(Country = str_split(Country, ';')) %>%
unchop(Country, keep_empty = TRUE) %>%
left_join(country_list, by = c('Country' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, country_id) %>%
left_join(mineral_name_locality, by=c('Mineral_Name'='mineral_name'), copy=TRUE)
View(mineral_name_locality_country)
mineral_name_locality_country <- initial %>%
select(Mineral_Name, Country) %>%
filter(!is.na(Country)) %>%
mutate(Country = str_split(Country, ';')) %>%
unchop(Country, keep_empty = TRUE) %>%
left_join(country_list, by = c('Country' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, country_id) %>%
left_join(mineral_name_locality, by=c('Mineral_Name'='mineral_name'), copy=TRUE) %>%
filter(!is.na(name_locality_id))
mineral_name_locality_country <- initial %>%
select(Mineral_Name, Country) %>%
filter(!is.na(Country)) %>%
mutate(Country = str_split(Country, ';')) %>%
unchop(Country, keep_empty = TRUE) %>%
left_join(country_list, by = c('Country' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, country_id) %>%
left_join(mineral_name_locality, by=c('Mineral_Name'='mineral_name'), copy=TRUE) %>%
filter(!is.na(id))
mineral_name_locality_country <- initial %>%
select(Mineral_Name, Country) %>%
filter(!is.na(Country)) %>%
mutate(Country = str_split(Country, ';')) %>%
unchop(Country, keep_empty = TRUE) %>%
left_join(country_list, by = c('Country' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, country_id) %>%
left_join(mineral_name_locality, by=c('Mineral_Name'='mineral_name'), copy=TRUE)
mineral_name_locality_country <- initial %>%
select(Mineral_Name, Country) %>%
filter(!is.na(Country)) %>%
mutate(Country = str_split(Country, ';')) %>%
unchop(Country, keep_empty = TRUE) %>%
left_join(country_list, by = c('Country' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, country_id) %>%
left_join(mineral_name_locality, by=c('Mineral_Name'='mineral_name'), copy=TRUE) %>%
filter(is.na(id))
View(mineral_name_locality_country)
View(mineral_name_locality)
# PROCESS DATA -----------------------------------------------------------------
mineral_name_locality_country <- initial %>%
select(Mineral_Name, Country) %>%
filter(!is.na(Country)) %>%
mutate(Country = str_split(Country, ';')) %>%
unchop(Country, keep_empty = TRUE) %>%
left_join(country_list, by = c('Country' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, country_id) %>%
left_join(mineral_name_locality, by=c('Mineral_Name'='mineral_name'), copy=TRUE) %>%
filter(is.na(id)) %>% # COMPARE MINERALS WITH MASTER TABLE !
rename(name_locality_id=id) %>%
select(name_locality_id, country_id)
# PROCESS DATA -----------------------------------------------------------------
mineral_name_locality_country <- initial %>%
select(Mineral_Name, Country) %>%
filter(!is.na(Country)) %>%
mutate(Country = str_split(Country, ';')) %>%
unchop(Country, keep_empty = TRUE) %>%
left_join(country_list, by = c('Country' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, country_id) %>%
left_join(mineral_name_locality, by=c('Mineral_Name'='mineral_name'), copy=TRUE) %>%
filter(!is.na(id)) %>% # COMPARE MINERALS WITH MASTER TABLE !
rename(name_locality_id=id) %>%
select(name_locality_id, country_id)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE mineral_name_locality_country RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "mineral_name_locality_country", mineral_name_locality_country, append=TRUE)
# Disconnect from the DB
dbDisconnect(conn)
