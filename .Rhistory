na = ""
)
conn <- dbConnect(RPostgres::Postgres(),dbname = 'master',
host = 'ec2-18-184-252-245.eu-central-1.compute.amazonaws.com',
port = 5433,
user = 'postgres',
password = 'BQBANe++XrmO5xWA3UqipNACx3Mf95kN')
library(tidyverse)
library(googlesheets4)
library(tidyjson)
library(DBI)
library(RCurl)
setwd("~/Dropbox/GP-minerals/R scripts/export_to_SQL/")
rm(list=ls())
path <- 'export/'
conn <- dbConnect(RPostgres::Postgres(),dbname = 'postgres',
host = 'master.c6ya4cff5frj.eu-central-1.rds.amazonaws.com',
port = 5432,
user = 'postgres',
password = 'BQBANe++XrmO5xWA3UqipNACx3Mf95kN')
initial <- googlesheets4::read_sheet(
ss='1FCu3ywv1wVMP6IZjwFezjipXXC74S8hRbLZaNzZCWpg',
sheet = 'Elements_data',
range = 'A:AV',
col_names = TRUE,
col_types = 'c',
na = ""
)
# PROCESS DATA -----------------------------------------------------------------
goldschmidt_class_list <- initial %>%
select(goldschmidt_classification) %>%
rename(goldschmidt_class_id = goldschmidt_classification) %>%
distinct(goldschmidt_class_id) %>%
arrange(goldschmidt_class_id)
View(goldschmidt_class_list)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE goldschmidt_class_list RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "goldschmidt_class_list", goldschmidt_class_list, append=TRUE)
# PROCESS DATA -----------------------------------------------------------------
goldschmidt_class_list <- initial %>%
select(goldschmidt_classification) %>%
rename(goldschmidt_class_name = goldschmidt_classification) %>%
distinct(goldschmidt_class_name) %>%
arrange(goldschmidt_class_name)
dbWriteTable(conn, "goldschmidt_class_list", goldschmidt_class_list, append=TRUE)
# PROCESS DATA -----------------------------------------------------------------
bonding_type_list <- initial %>%
select(bonding_type) %>%
rename(bonding_type_name = bonding_type) %>%
distinct(bonding_type_name) %>%
arrange(bonding_type_name)
View(bonding_type_list)
# PROCESS DATA -----------------------------------------------------------------
bonding_type_list <- initial %>%
select(bonding_type) %>%
rename(bonding_type_name = bonding_type) %>%
distinct(bonding_type_name) %>%
filter(is.na(bonding_type_name)) %>%
arrange(bonding_type_name)
# PROCESS DATA -----------------------------------------------------------------
bonding_type_list <- initial %>%
select(bonding_type) %>%
rename(bonding_type_name = bonding_type) %>%
distinct(bonding_type_name) %>%
filter(!is.na(bonding_type_name)) %>%
arrange(bonding_type_name)
View(bonding_type_list)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE bonding_type_list RESTART IDENTITY CASCADE;")
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE bonding_type_list RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "bonding_type_list", bonding_type_list, append=TRUE)
View(initial)
# PROCESS DATA -----------------------------------------------------------------
phase_state_list <- initial %>%
select(standard_state) %>%
rename(phase_state_name = standard_state) %>%
distinct(phase_state_name) %>%
filter(!is.na(phase_state_name)) %>%
arrange(phase_state_name)
View(phase_state_list)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE phase_state_list RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "phase_state_list", phase_state_list, append=TRUE)
# PROCESS DATA -----------------------------------------------------------------
chemical_group_list <- initial %>%
select(group_block) %>%
rename(chemical_group_name = group_block) %>%
distinct(chemical_group_name) %>%
filter(!is.na(chemical_group_name)) %>%
arrange(chemical_group_name)
View(chemical_group_list)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE chemical_group_list RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "chemical_group_list", chemical_group_list, append=TRUE)
goldschmidt_class_list = tbl(conn, 'goldschmidt_class_list')
bonding_type_list = tbl(conn, 'bonding_type_list')
chemical_group_list = tbl(conn, 'chemical_group_list')
phase_state_list = tbl(conn, 'phase_state_list')
View(initial)
View(initial)
colnames(initial)
# PROCESS DATA -----------------------------------------------------------------
el_data <- initial %>%
left_join(goldschmidt_class_list, by=c('goldschmidt_classification'='goldschmidt_class_name'), copy=TRUE) %>%
left_join(bonding_type_list, by=c('bonding_type'='bonding_type_name'), copy=TRUE) %>%
left_join(chemical_group_list, by=c('group_block'='chemical_group_name'), copy=TRUE) %>%
left_join(phase_state_list, by=c('standard_state'='phase_state_name'), copy=TRUE) %>%
mutate(atomic_mass = str_replace(atomic_mass, ',', '.'),
electronegativity = str_replace(electronegativity, ',', '.'),
ion_radius = str_replace(ion_radius, ',', '.'),
density = str_replace(density, ',', '.'),
crust_crc_handbook = str_replace(crust_crc_handbook, ',', '.'),
crust_kaye_laby = str_replace(crust_kaye_laby, ',', '.'),
crust_greenwood = str_replace(crust_greenwood, ',', '.'),
crust_ahrens_taylor = str_replace(crust_ahrens_taylor, ',', '.'),
crust_ahrens_wanke = str_replace(crust_ahrens_wanke, ',', '.'),
crust_ahrens_waver = str_replace(crust_ahrens_waver, ',', '.'),
upper_crust_ahrens_taylor = str_replace(upper_crust_ahrens_taylor, ',', '.'),
upper_crust_ahrens_shaw = str_replace(upper_crust_ahrens_shaw, ',', '.'),
sea_water_crc_handbook = str_replace(sea_water_crc_handbook, ',', '.'),
sea_water_kaye_laby = str_replace(sea_water_kaye_laby, ',', '.'),
sun_kaye_laby = str_replace(sun_kaye_laby, ',', '.'),
solar_system_kaye_laby = str_replace(solar_system_kaye_laby, ',', '.'),
solar_system_ahrens = str_replace(solar_system_ahrens, ',', '.'),
solar_system_ahrens_with_uncertainty = str_replace(solar_system_ahrens_with_uncertainty, ',', '.')
) %>%
arrange(!desc(atomic_number))
# PROCESS DATA -----------------------------------------------------------------
element_list <- initial %>%
left_join(goldschmidt_class_list, by=c('goldschmidt_classification'='goldschmidt_class_name'), copy=TRUE) %>%
left_join(bonding_type_list, by=c('bonding_type'='bonding_type_name'), copy=TRUE) %>%
left_join(chemical_group_list, by=c('group_block'='chemical_group_name'), copy=TRUE) %>%
left_join(phase_state_list, by=c('standard_state'='phase_state_name'), copy=TRUE) %>%
mutate(atomic_mass = str_replace(atomic_mass, ',', '.'),
electronegativity = str_replace(electronegativity, ',', '.'),
ion_radius = str_replace(ion_radius, ',', '.'),
density = str_replace(density, ',', '.'),
crust_crc_handbook = str_replace(crust_crc_handbook, ',', '.'),
crust_kaye_laby = str_replace(crust_kaye_laby, ',', '.'),
crust_greenwood = str_replace(crust_greenwood, ',', '.'),
crust_ahrens_taylor = str_replace(crust_ahrens_taylor, ',', '.'),
crust_ahrens_wanke = str_replace(crust_ahrens_wanke, ',', '.'),
crust_ahrens_waver = str_replace(crust_ahrens_waver, ',', '.'),
upper_crust_ahrens_taylor = str_replace(upper_crust_ahrens_taylor, ',', '.'),
upper_crust_ahrens_shaw = str_replace(upper_crust_ahrens_shaw, ',', '.'),
sea_water_crc_handbook = str_replace(sea_water_crc_handbook, ',', '.'),
sea_water_kaye_laby = str_replace(sea_water_kaye_laby, ',', '.'),
sun_kaye_laby = str_replace(sun_kaye_laby, ',', '.'),
solar_system_kaye_laby = str_replace(solar_system_kaye_laby, ',', '.'),
solar_system_ahrens = str_replace(solar_system_ahrens, ',', '.'),
solar_system_ahrens_with_uncertainty = str_replace(solar_system_ahrens_with_uncertainty, ',', '.')
) %>%
arrange(!desc(atomic_number))
View(element_list)
View(element_list)
colnames(initial)
as.character(colnames(initial))
list(colnames(initial))
# PROCESS DATA -----------------------------------------------------------------
element_list <- initial %>%
left_join(goldschmidt_class_list, by=c('goldschmidt_classification'='goldschmidt_class_name'), copy=TRUE) %>%
left_join(bonding_type_list, by=c('bonding_type'='bonding_type_name'), copy=TRUE) %>%
left_join(chemical_group_list, by=c('group_block'='chemical_group_name'), copy=TRUE) %>%
left_join(phase_state_list, by=c('standard_state'='phase_state_name'), copy=TRUE) %>%
mutate(atomic_mass = str_replace(atomic_mass, ',', '.'),
electronegativity = str_replace(electronegativity, ',', '.'),
ion_radius = str_replace(ion_radius, ',', '.'),
density = str_replace(density, ',', '.'),
crust_crc_handbook = str_replace(crust_crc_handbook, ',', '.'),
crust_kaye_laby = str_replace(crust_kaye_laby, ',', '.'),
crust_greenwood = str_replace(crust_greenwood, ',', '.'),
crust_ahrens_taylor = str_replace(crust_ahrens_taylor, ',', '.'),
crust_ahrens_wanke = str_replace(crust_ahrens_wanke, ',', '.'),
crust_ahrens_waver = str_replace(crust_ahrens_waver, ',', '.'),
upper_crust_ahrens_taylor = str_replace(upper_crust_ahrens_taylor, ',', '.'),
upper_crust_ahrens_shaw = str_replace(upper_crust_ahrens_shaw, ',', '.'),
sea_water_crc_handbook = str_replace(sea_water_crc_handbook, ',', '.'),
sea_water_kaye_laby = str_replace(sea_water_kaye_laby, ',', '.'),
sun_kaye_laby = str_replace(sun_kaye_laby, ',', '.'),
solar_system_kaye_laby = str_replace(solar_system_kaye_laby, ',', '.'),
solar_system_ahrens = str_replace(solar_system_ahrens, ',', '.'),
solar_system_ahrens_with_uncertainty = str_replace(solar_system_ahrens_with_uncertainty, ',', '.')
) %>%
arrange(!desc(atomic_number)) %>%
select(element,name,atomic_number,name_alternative,atomic_mass,atomic_mass_standard_uncertainty,electronic_configuration,cpk_hex_color,
goldschmidt_class_id,electronegativity,empirical_atomic_radius,calculated_atomic_radius,
van_der_waals_radius,covalent_single_bond_atomic_radius,covalent_triple_bond_atomic_radius,metallic_atomic_radius,
ion_radius,ion_radius_charge,ionization_energy,electron_affinity,
oxidation_states,phase_state_id,bonding_type_id,melting_point,
boiling_point,density,chemical_group_id,crust_crc_handbook,
crust_kaye_laby,crust_greenwood,crust_ahrens_taylor,crust_ahrens_wanke,
crust_ahrens_waver,upper_crust_ahrens_taylor,upper_crust_ahrens_shaw,sea_water_crc_handbook,
sea_water_kaye_laby,sun_kaye_laby,solar_system_kaye_laby,solar_system_ahrens,
solar_system_ahrens_with_uncertainty,natural_isotopes,name_meaning,discovery_year,
discoverer,application,safety,biological_role)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE element_list RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "element_list", element_list, append=TRUE)
ion_list = tbl(conn, 'ion_list')
element_list = tbl(conn, 'element_list')
#Load data ---------------------------------------------------------------------
initial <- googlesheets4::read_sheet(
ss='1FCu3ywv1wVMP6IZjwFezjipXXC74S8hRbLZaNzZCWpg',
sheet = 'Ions_data',
range = 'A:H',
col_names = TRUE,
col_types = 'c',
na = ""
)
ion_list_local <-
ion_list %>%
collect()
ion_element <- ion_list_local %>%
select(ion_id, formula) %>%
mutate(element=str_match_all(formula, '[A-Z][a-z]?')) %>%
mutate(element=ifelse(formula=='REE', list(c('Ce', 'Dy', 'Er', 'Eu', 'Gd', 'Ho', 'La', 'Lu', 'Nd', 'Pr', 'Pm', 'Sm', 'Sc', 'Tb', 'Tm', 'Yb', 'Y')), element)) %>%
mutate(element=ifelse(formula=='Ln^3+^', list(c('Ce', 'Dy', 'Er', 'Gd', 'La', 'Nd', 'Pr', 'Sm', 'Yb')), element)) %>%
unchop(element, keep_empty = TRUE) %>%
distinct(ion_id, element) %>%
left_join(element_list, by='element', copy=TRUE) %>%
select(ion_id, element_id)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE ion_element RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "ion_element", ion_element, append=TRUE)
# Disconnect from the DB
dbDisconnect(conn)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE ion_element RESTART IDENTITY CASCADE;")
conn <- dbConnect(RPostgres::Postgres(),dbname = 'postgres',
host = 'master.c6ya4cff5frj.eu-central-1.rds.amazonaws.com',
port = 5432,
user = 'postgres',
password = 'BQBANe++XrmO5xWA3UqipNACx3Mf95kN')
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE ion_element RESTART IDENTITY CASCADE;")
View(ion_element)
dbWriteTable(conn, "ion_element", ion_element, append=TRUE)
dbWriteTable(conn, "ion_element", ion_element, append=TRUE)
initial <- googlesheets4::read_sheet(
ss='1FCu3ywv1wVMP6IZjwFezjipXXC74S8hRbLZaNzZCWpg',
sheet = 'Ions_data',
range = 'A:X',
col_names = TRUE,
col_types = 'c',
na = ""
)
ion_list_anions <- ion_list %>%
filter(ion_type_id == 1)
anions <- initial %>%
select(anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
distinct(anion_subunites) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('anion_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
ion_list_cations <- ion_list %>%
filter(ion_type_id == 2)
cations <- initial %>%
select(cation_subunites) %>%
mutate(cation_subunites=str_split(cation_subunites, ';')) %>%
unchop(cation_subunites, keep_empty = TRUE) %>%
distinct(cation_subunites) %>%
filter(!is.na(cation_subunites)) %>%
left_join(ion_list_cations, by=c('cation_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
ion_list_silicates <- ion_list %>%
filter(ion_type_id == 3)
silicates <- initial %>%
select(silicate_subunites) %>%
mutate(silicate_subunites=str_split(silicate_subunites, ';')) %>%
unchop(silicate_subunites, keep_empty = TRUE) %>%
distinct(silicate_subunites) %>%
filter(!is.na(silicate_subunites)) %>%
left_join(ion_list_silicates, by=c('silicate_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
ion_list_other <- ion_list %>%
filter(ion_type_id == 4)
other <- initial %>%
select(other_subunites) %>%
mutate(other_subunites=str_split(other_subunites, ';')) %>%
unchop(other_subunites, keep_empty = TRUE) %>%
distinct(other_subunites) %>%
filter(!is.na(other_subunites)) %>%
left_join(ion_list_other, by=c('other_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
conn <- dbConnect(RPostgres::Postgres(),dbname = 'postgres',
host = 'master.c6ya4cff5frj.eu-central-1.rds.amazonaws.com',
port = 5432,
user = 'postgres',
password = 'BQBANe++XrmO5xWA3UqipNACx3Mf95kN')
ion_list_anions <- ion_list %>%
filter(ion_type_id == 1)
anions <- initial %>%
select(anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
distinct(anion_subunites) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('anion_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
ion_list_cations <- ion_list %>%
filter(ion_type_id == 2)
cations <- initial %>%
select(cation_subunites) %>%
mutate(cation_subunites=str_split(cation_subunites, ';')) %>%
unchop(cation_subunites, keep_empty = TRUE) %>%
distinct(cation_subunites) %>%
filter(!is.na(cation_subunites)) %>%
left_join(ion_list_cations, by=c('cation_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
ion_list_silicates <- ion_list %>%
filter(ion_type_id == 3)
silicates <- initial %>%
select(silicate_subunites) %>%
mutate(silicate_subunites=str_split(silicate_subunites, ';')) %>%
unchop(silicate_subunites, keep_empty = TRUE) %>%
distinct(silicate_subunites) %>%
filter(!is.na(silicate_subunites)) %>%
left_join(ion_list_silicates, by=c('silicate_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
ion_list_other <- ion_list %>%
filter(ion_type_id == 4)
other <- initial %>%
select(other_subunites) %>%
mutate(other_subunites=str_split(other_subunites, ';')) %>%
unchop(other_subunites, keep_empty = TRUE) %>%
distinct(other_subunites) %>%
filter(!is.na(other_subunites)) %>%
left_join(ion_list_other, by=c('other_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
ion_list = tbl(conn, 'ion_list')
ion_list_anions <- ion_list %>%
filter(ion_type_id == 1)
anions <- initial %>%
select(anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
distinct(anion_subunites) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('anion_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
ion_list_cations <- ion_list %>%
filter(ion_type_id == 2)
cations <- initial %>%
select(cation_subunites) %>%
mutate(cation_subunites=str_split(cation_subunites, ';')) %>%
unchop(cation_subunites, keep_empty = TRUE) %>%
distinct(cation_subunites) %>%
filter(!is.na(cation_subunites)) %>%
left_join(ion_list_cations, by=c('cation_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
ion_list_silicates <- ion_list %>%
filter(ion_type_id == 3)
silicates <- initial %>%
select(silicate_subunites) %>%
mutate(silicate_subunites=str_split(silicate_subunites, ';')) %>%
unchop(silicate_subunites, keep_empty = TRUE) %>%
distinct(silicate_subunites) %>%
filter(!is.na(silicate_subunites)) %>%
left_join(ion_list_silicates, by=c('silicate_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
ion_list_other <- ion_list %>%
filter(ion_type_id == 4)
other <- initial %>%
select(other_subunites) %>%
mutate(other_subunites=str_split(other_subunites, ';')) %>%
unchop(other_subunites, keep_empty = TRUE) %>%
distinct(other_subunites) %>%
filter(!is.na(other_subunites)) %>%
left_join(ion_list_other, by=c('other_subunites'='formula'), copy=TRUE) %>%
filter(is.na(ion_id))
anions <- initial %>%
select(formula, anion_subunites) %>%
mutate(anion_subunites=str_split(anion_subunites, ';')) %>%
unchop(anion_subunites, keep_empty = TRUE) %>%
filter(!is.na(anion_subunites)) %>%
left_join(ion_list_anions, by=c('anion_subunites'='formula'), copy=TRUE) %>%
select(formula, ion_id) %>%
rename(subunit_id=ion_id) %>%
left_join(ion_list, by=c('formula'='formula'), copy=TRUE) %>%
select(ion_id, subunit_id)
cations <- initial %>%
select(formula, cation_subunites) %>%
mutate(cation_subunites=str_split(cation_subunites, ';')) %>%
unchop(cation_subunites, keep_empty = TRUE) %>%
filter(!is.na(cation_subunites)) %>%
left_join(ion_list_cations, by=c('cation_subunites'='formula'), copy=TRUE) %>%
select(formula, ion_id) %>%
rename(subunit_id=ion_id) %>%
left_join(ion_list, by=c('formula'='formula'), copy=TRUE) %>%
select(ion_id, subunit_id)
silicates <- initial %>%
select(formula, silicate_subunites) %>%
mutate(silicate_subunites=str_split(silicate_subunites, ';')) %>%
unchop(silicate_subunites, keep_empty = TRUE) %>%
filter(!is.na(silicate_subunites)) %>%
left_join(ion_list_silicates, by=c('silicate_subunites'='formula'), copy=TRUE) %>%
select(formula, ion_id) %>%
rename(subunit_id=ion_id) %>%
left_join(ion_list, by=c('formula'='formula'), copy=TRUE) %>%
select(ion_id, subunit_id)
other <- initial %>%
select(formula, other_subunites) %>%
mutate(other_subunites=str_split(other_subunites, ';')) %>%
unchop(other_subunites, keep_empty = TRUE) %>%
filter(!is.na(other_subunites)) %>%
left_join(ion_list_other, by=c('other_subunites'='formula'), copy=TRUE) %>%
select(formula, ion_id) %>%
rename(subunit_id=ion_id) %>%
left_join(ion_list, by=c('formula'='formula'), copy=TRUE) %>%
select(ion_id, subunit_id)
ion_subunit <- union(anions, cations, silicates, other) %>%
arrange(ion_id, subunit_id)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE ion_subunit RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "ion_subunit", ion_subunit, append=TRUE)
library(tidyverse)
library(googlesheets4)
library(tidyjson)
library(DBI)
library(RCurl)
setwd("~/Dropbox/GP-minerals/R scripts/export_to_SQL/")
rm(list=ls())
path <- 'export/'
source('functions.R')
conn <- dbConnect(RPostgres::Postgres(),dbname = 'postgres',
host = 'master.c6ya4cff5frj.eu-central-1.rds.amazonaws.com',
port = 5432,
user = 'postgres',
password = 'BQBANe++XrmO5xWA3UqipNACx3Mf95kN')
initial <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Names data',
range = 'A:AK',
col_names = TRUE,
col_types = 'c',
na = ""
)
country_list <- tbl(conn, 'country_list')
mineral_list = tbl(conn, 'mineral_list')
# PROCESS DATA -----------------------------------------------------------------
ms_names_institution <- initial %>%
filter(!is.na(`GROUP/INSTITUTION`)) %>%
select(Mineral_Name, `GROUP/INSTITUTION`, About, Nationality__1)
# COMPARE WITH languages_list --------- OMIT THIS STEP !!!!! -------------------
countries_bugs <- ms_names_institution %>%
anti_join(countries_list, by = c('Nationality__1' = 'name'), copy=TRUE)
# COMPARE WITH languages_list --------- OMIT THIS STEP !!!!! -------------------
countries_bugs <- ms_names_institution %>%
anti_join(country_list, by = c('Nationality__1' = 'name'), copy=TRUE)
# COMPARE WITH languages_list --------- OMIT THIS STEP !!!!! -------------------
countries_bugs <- ms_names_institution %>%
anti_join(country_list, by = c('Nationality__1' = 'country_name'), copy=TRUE)
# replace countries names with ids
ms_names_institution <-
ms_names_institution %>%
left_join(country_list, by=c('Nationality__1' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, `GROUP/INSTITUTION`, About, id) %>%
rename(name=Mineral_Name, institution_name = `GROUP/INSTITUTION`, note=About, country_id=id) %>%
left_join(mineral_list, by=c('name'='mineral_name'), copy=TRUE) %>%
rename(note=note.x) %>%
select(mineral_id, institution_name, note, country_id)
# replace countries names with ids
ms_names_institution <-
ms_names_institution %>%
left_join(country_list, by=c('Nationality__1' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, `GROUP/INSTITUTION`, About, country_id) %>%
rename(name=Mineral_Name, institution_name = `GROUP/INSTITUTION`, note=About) %>%
left_join(mineral_list, by=c('name'='mineral_name'), copy=TRUE) %>%
rename(note=note.x) %>%
select(mineral_id, institution_name, note, country_id)
View(ms_names_institution)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE mineral_name_institution RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "mineral_name_institution", mineral_name_institution, append=TRUE)
# replace countries names with ids
mineral_name_institution <-
ms_names_institution %>%
left_join(country_list, by=c('Nationality__1' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, `GROUP/INSTITUTION`, About, country_id) %>%
rename(name=Mineral_Name, institution_name = `GROUP/INSTITUTION`, note=About) %>%
left_join(mineral_list, by=c('name'='mineral_name'), copy=TRUE) %>%
rename(note=note.x) %>%
select(mineral_id, institution_name, note, country_id)
# replace countries names with ids
mineral_name_institution <-
mineral_name_institution %>%
left_join(country_list, by=c('Nationality__1' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, `GROUP/INSTITUTION`, About, country_id) %>%
rename(name=Mineral_Name, institution_name = `GROUP/INSTITUTION`, note=About) %>%
left_join(mineral_list, by=c('name'='mineral_name'), copy=TRUE) %>%
rename(note=note.x) %>%
select(mineral_id, institution_name, note, country_id)
# PROCESS DATA -----------------------------------------------------------------
mineral_name_institution <- initial %>%
filter(!is.na(`GROUP/INSTITUTION`)) %>%
select(Mineral_Name, `GROUP/INSTITUTION`, About, Nationality__1)
# replace countries names with ids
mineral_name_institution <-
mineral_name_institution %>%
left_join(country_list, by=c('Nationality__1' = 'country_name'), copy=TRUE) %>%
select(Mineral_Name, `GROUP/INSTITUTION`, About, country_id) %>%
rename(name=Mineral_Name, institution_name = `GROUP/INSTITUTION`, note=About) %>%
left_join(mineral_list, by=c('name'='mineral_name'), copy=TRUE) %>%
rename(note=note.x) %>%
select(mineral_id, institution_name, note, country_id)
View(mineral_name_institution)
# UPLOAD DATA TO DB
dbSendQuery(conn, "TRUNCATE TABLE mineral_name_institution RESTART IDENTITY CASCADE;")
dbWriteTable(conn, "mineral_name_institution", mineral_name_institution, append=TRUE)
