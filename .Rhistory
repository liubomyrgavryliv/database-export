left_join(crystal_systems_list,by = c('Crystal System' = 'crystal_system_name'), copy=TRUE) %>%
filter(is.na('Crystal System') & is.na(crystal_system_id))
View(ms_species_crystal)
# PROCESS data -----------------------------------------------------------------
ms_species_crystal <-
initial %>%
select(`Class Name`) %>%
mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
unchop(crystal_class_name, keep_empty = TRUE) %>%
distinct(crystal_class_name)
View(ms_species_crystal)
# PROCESS data -----------------------------------------------------------------
ms_species_crystal <-
initial %>%
select(`Class Name`) %>%
mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
unchop(crystal_class_name, keep_empty = TRUE) %>%
distinct(crystal_class_name) %>%
arrange(crystal_class_name)
View(ms_species_crystal)
initial %>%
select(`Class Name`) %>%
mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
unchop(crystal_class_name, keep_empty = TRUE) %>%
distinct(crystal_class_name) %>%
arrange(crystal_class_name) %>%
left_join(crystal_classes_list,by = crystal_class_name, copy=TRUE)
initial %>%
select(`Class Name`) %>%
mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
unchop(crystal_class_name, keep_empty = TRUE) %>%
distinct(crystal_class_name) %>%
arrange(crystal_class_name) %>%
left_join(crystal_classes_list,by = 'crystal_class_name', copy=TRUE)
# PROCESS data -----------------------------------------------------------------
ms_species_crystal <-
initial %>%
select(`Class Name`) %>%
mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
unchop(crystal_class_name, keep_empty = TRUE) %>%
distinct(crystal_class_name) %>%
arrange(crystal_class_name) %>%
left_join(crystal_classes_list,by = 'crystal_class_name', copy=TRUE) %>%
filter(is.na('Crystal Class') & is.na(crystal_class_id)) # check if all crystal classes are present
ms_species_crystal <-
initial %>%
select(`Class Name`) %>%
mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
unchop(crystal_class_name, keep_empty = TRUE) %>%
distinct(crystal_class_name) %>%
arrange(crystal_class_name) %>%
left_join(crystal_classes_list,by = 'crystal_class_name', copy=TRUE)
View(ms_species_crystal)
# PROCESS data -----------------------------------------------------------------
ms_species_crystal <-
initial %>%
select(`Class Name`) %>%
mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
unchop(crystal_class_name, keep_empty = TRUE) %>%
distinct(crystal_class_name) %>%
arrange(crystal_class_name) %>%
left_join(crystal_classes_list,by = 'crystal_class_name', copy=TRUE) %>%
filter(!is.na('Crystal Class') & is.na(crystal_class_id)) # check if all crystal classes are present
View(ms_species_crystal)
initial <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Crystallography',
range = 'A:O',
col_names = TRUE,
)
# PROCESS data -----------------------------------------------------------------
ms_species_crystal <-
initial %>%
select(`Class Name`) %>%
mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
unchop(crystal_class_name, keep_empty = TRUE) %>%
distinct(crystal_class_name) %>%
arrange(crystal_class_name) %>%
left_join(crystal_classes_list,by = 'crystal_class_name', copy=TRUE) %>%
filter(!is.na('Crystal Class') & is.na(crystal_class_id)) # check if all crystal classes are present
View(ms_species_crystal)
# PROCESS data -----------------------------------------------------------------
ms_species_crystal <-
initial %>%
select(`Class Name`) %>%
mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
unchop(crystal_class_name, keep_empty = TRUE) %>%
distinct(crystal_class_name) %>%
arrange(crystal_class_name) %>%
# left_join(crystal_classes_list,by = 'crystal_class_name', copy=TRUE) %>%
# filter(!is.na('Crystal Class') & is.na(crystal_class_id)) # check if all crystal classes are present
left_join(crystal_systems_list,by = c('Crystal System' = 'crystal_system_name'), copy=TRUE) %>%
filter(!is.na('Crystal System') & is.na(crystal_system_id)) # check if all crystal systems are present
ms_species_crystal <-
initial %>%
select(`Class Name`) %>%
mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
unchop(crystal_class_name, keep_empty = TRUE) %>%
distinct(crystal_class_name) %>%
arrange(crystal_class_name) %>%
# left_join(crystal_classes_list,by = 'crystal_class_name', copy=TRUE) %>%
# filter(!is.na('Crystal Class') & is.na(crystal_class_id)) # check if all crystal classes are present
left_join(crystal_systems_list,by = c('Crystal System' = 'crystal_system_name'), copy=TRUE) %>%
filter(!is.na('Crystal System') & is.na(crystal_system_id)) # check if all crystal systems are present
initial
crystal_systems_list
ms_species_crystal <-
initial %>%
select(`Class Name`) %>%
mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
unchop(crystal_class_name, keep_empty = TRUE) %>%
distinct(crystal_class_name) %>%
arrange(crystal_class_name) %>%
# left_join(crystal_classes_list,by = 'crystal_class_name', copy=TRUE) %>%
# filter(!is.na('Crystal Class') & is.na(crystal_class_id)) # check if all crystal classes are present
left_join(crystal_systems_list,by = c('Crystal System' = 'crystal_system_name'), copy=TRUE)
# PROCESS data -----------------------------------------------------------------
ms_species_crystal <-
initial %>%
select(`Class Name`) %>%
mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
unchop(crystal_class_name, keep_empty = TRUE) %>%
distinct(crystal_class_name) %>%
arrange(crystal_class_name) %>%
left_join(crystal_systems_list,by = c('Crystal System' = 'crystal_system_name'), copy=TRUE) %>%
filter(!is.na('Crystal System') & is.na(crystal_system_id)) # check if all crystal systems are present
# PROCESS data -----------------------------------------------------------------
ms_species_crystal <-
initial %>%
# select(`Class Name`) %>%
# mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
# unchop(crystal_class_name, keep_empty = TRUE) %>%
# distinct(crystal_class_name) %>%
# arrange(crystal_class_name) %>%
# left_join(crystal_classes_list,by = 'crystal_class_name', copy=TRUE) %>%
# filter(!is.na('Crystal Class') & is.na(crystal_class_id)) # check if all crystal classes are present
left_join(crystal_systems_list,by = c('Crystal System' = 'crystal_system_name'), copy=TRUE) %>%
filter(!is.na('Crystal System') & is.na(crystal_system_id)) # check if all crystal systems are present
View(ms_species_crystal)
View(ms_species_crystal)
# PROCESS data -----------------------------------------------------------------
ms_species_crystal <-
initial %>%
# select(`Class Name`) %>%
# mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
# unchop(crystal_class_name, keep_empty = TRUE) %>%
# distinct(crystal_class_name) %>%
# arrange(crystal_class_name) %>%
# left_join(crystal_classes_list,by = 'crystal_class_name', copy=TRUE) %>%
# filter(!is.na('Crystal Class') & is.na(crystal_class_id)) # check if all crystal classes are present
left_join(crystal_systems_list,by = c('Crystal System' = 'crystal_system_name'), copy=TRUE) %>%
filter(!is.na('Crystal System') & is.na(crystal_system_id)) # check if all crystal systems are present
# PROCESS data -----------------------------------------------------------------
ms_species_crystal <-
initial %>%
# select(`Class Name`) %>%
# mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
# unchop(crystal_class_name, keep_empty = TRUE) %>%
# distinct(crystal_class_name) %>%
# arrange(crystal_class_name) %>%
# left_join(crystal_classes_list,by = 'crystal_class_name', copy=TRUE) %>%
# filter(!is.na('Crystal Class') & is.na(crystal_class_id)) # check if all crystal classes are present
left_join(crystal_systems_list,by = c('Crystal System' = 'crystal_system_name'), copy=TRUE) %>%
filter(!is.na('Crystal System')) # check if all crystal systems are present
View(ms_species_crystal)
# PROCESS data -----------------------------------------------------------------
ms_species_crystal <-
initial %>%
# select(`Class Name`) %>%
# mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
# unchop(crystal_class_name, keep_empty = TRUE) %>%
# distinct(crystal_class_name) %>%
# arrange(crystal_class_name) %>%
# left_join(crystal_classes_list,by = 'crystal_class_name', copy=TRUE) %>%
# filter(!is.na('Crystal Class') & is.na(crystal_class_id)) # check if all crystal classes are present
left_join(crystal_systems_list,by = c('Crystal System' = 'crystal_system_name'), copy=TRUE) %>%
filter(!is.na('Crystal System') && is.na(crystal_system_id)) # check if all crystal systems are present
# PROCESS data -----------------------------------------------------------------
ms_species_crystal <-
initial %>%
# select(`Class Name`) %>%
# mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
# unchop(crystal_class_name, keep_empty = TRUE) %>%
# distinct(crystal_class_name) %>%
# arrange(crystal_class_name) %>%
# left_join(crystal_classes_list,by = 'crystal_class_name', copy=TRUE) %>%
# filter(!is.na('Crystal Class') && is.na(crystal_class_id)) # check if all crystal classes are present
left_join(crystal_systems_list,by = c('Crystal System' = 'crystal_system_name'), copy=TRUE) %>%
filter(!is.na('Crystal System') && !is.na(crystal_system_id)) # check if all crystal systems are present
View(ms_species_crystal)
View(initial)
View(ms_species_crystal)
# LOAD data ---------------------------------------------------------------------
initial <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Crystallography',
range = 'A:O',col_types = 'c',
col_names = TRUE,
)
View(initial)
# PROCESS data -----------------------------------------------------------------
# validate crystal_system_name
validate <- initial %>%
select(`Class System`) %>%
distinct(`Class System`) %>%
left_join(crystal_systems_list,by = c('Crystal System' = 'crystal_system_name'), copy=TRUE) %>%
filter(!is.na('Crystal System') && is.na(crystal_system_id)) # check if all crystal systems are present
# PROCESS data -----------------------------------------------------------------
# validate crystal_system_name
validate <- initial %>%
select(`Crystal System`) %>%
distinct(`Crystal System`) %>%
left_join(crystal_systems_list,by = c('Crystal System' = 'crystal_system_name'), copy=TRUE) %>%
filter(!is.na('Crystal System') && is.na(crystal_system_id)) # check if all crystal systems are present
validate <- initial %>%
select(`Class Name`) %>%
mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
unchop(crystal_class_name, keep_empty = TRUE) %>%
distinct(crystal_class_name) %>%
arrange(crystal_class_name) %>%
left_join(crystal_classes_list,by = 'crystal_class_name', copy=TRUE) %>%
filter(!is.na('Crystal Class') && is.na(crystal_class_id)) # check if all crystal classes are present
validate <- initial %>%
select(`Class Name`) %>%
mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
unchop(crystal_class_name, keep_empty = TRUE) %>%
distinct(crystal_class_name) %>%
arrange(crystal_class_name) %>%
left_join(crystal_classes_list,by = 'crystal_class_name', copy=TRUE)
View(validate)
if (validate == 0){
validate <- initial %>%
select(`Class Name`) %>%
mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
unchop(crystal_class_name, keep_empty = TRUE) %>%
distinct(crystal_class_name) %>%
arrange(crystal_class_name) %>%
left_join(crystal_classes_list,by = 'crystal_class_name', copy=TRUE) %>%
filter(!is.na('Crystal Class') && is.na(crystal_class_id)) # check if all crystal classes are present
} else {
print('error is recorded!')
}
length()
if (length(validate) == 0){
validate <- initial %>%
select(`Class Name`) %>%
mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
unchop(crystal_class_name, keep_empty = TRUE) %>%
distinct(crystal_class_name) %>%
arrange(crystal_class_name) %>%
left_join(crystal_classes_list,by = 'crystal_class_name', copy=TRUE) %>%
filter(!is.na('Crystal Class') && is.na(crystal_class_id)) # check if all crystal classes are present
} else {
print('error is recorded!')
}
validate
validate <- initial %>%
select(`Class Name`) %>%
mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
unchop(crystal_class_name, keep_empty = TRUE) %>%
distinct(crystal_class_name) %>%
arrange(crystal_class_name) %>%
left_join(crystal_classes_list,by = 'crystal_class_name', copy=TRUE) %>%
filter(!is.na('Crystal Class') && is.na(crystal_class_id)) # check if all crystal classes are present
# PROCESS data -----------------------------------------------------------------
# validate crystal_system_name
validate <- initial %>%
select(`Crystal System`) %>%
distinct(`Crystal System`) %>%
left_join(crystal_systems_list,by = c('Crystal System' = 'crystal_system_name'), copy=TRUE) %>%
filter(!is.na('Crystal System') && is.na(crystal_system_id)) # check if all crystal systems are present
if (length(validate) == 0){
validate <- initial %>%
select(`Class Name`) %>%
mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
unchop(crystal_class_name, keep_empty = TRUE) %>%
distinct(crystal_class_name) %>%
arrange(crystal_class_name) %>%
left_join(crystal_classes_list,by = 'crystal_class_name', copy=TRUE) %>%
filter(!is.na('Crystal Class') && is.na(crystal_class_id)) # check if all crystal classes are present
} else {
print('error is recorded!')
}
# PROCESS data -----------------------------------------------------------------
# validate crystal_system_name
validate <- initial %>%
select(`Crystal System`) %>%
distinct(`Crystal System`) %>%
left_join(crystal_systems_list,by = c('Crystal System' = 'crystal_system_name'), copy=TRUE) %>%
filter(!is.na('Crystal System') && is.na(crystal_system_id)) # check if all crystal systems are present
validate
row_number(validate)
row_number(validate) == 0
row_number(validate) > 0
if (row_number(validate) == 0){
validate <- initial %>%
select(`Class Name`) %>%
mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
unchop(crystal_class_name, keep_empty = TRUE) %>%
distinct(crystal_class_name) %>%
arrange(crystal_class_name) %>%
left_join(crystal_classes_list,by = 'crystal_class_name', copy=TRUE) %>%
filter(!is.na('Crystal Class') && is.na(crystal_class_id)) # check if all crystal classes are present
} else {
print('error is recorded!')
}
validate
row(validate)
validate$crystal_system_id
length(validate$crystal_system_id)
if (length(validate$crystal_system_id) == 0){
validate <- initial %>%
select(`Class Name`) %>%
mutate(crystal_class_name=str_split(`Class Name`, ',|;|, ')) %>%
unchop(crystal_class_name, keep_empty = TRUE) %>%
distinct(crystal_class_name) %>%
arrange(crystal_class_name) %>%
left_join(crystal_classes_list,by = 'crystal_class_name', copy=TRUE) %>%
filter(!is.na('Crystal Class') && is.na(crystal_class_id)) # check if all crystal classes are present
} else {
print('error is recorded!')
}
# validate space_group_name
validate <- initial %>%
select(`Space group`, Note)
validate <- initial %>%
select(`Space group`, Note) %>%
filter(!is.na(Note))
View(validate)
View(validate)
validate <- initial %>%
select(`Space group`, Note) %>%
filter(!is.na(Note)) %>%
mutate(space_group_name=str_split(`Space group`, ',|;|, ')) %>%
unchop(space_group_name, keep_empty = TRUE)
View(validate)
# validate space_group_name
validate <- initial %>%
select(`Space group`, Note) %>%
filter(str_match(Note, 'standard')) %>%
mutate(space_group_name=str_split(`Space group`, ',|;|, ')) %>%
unchop(space_group_name, keep_empty = TRUE) %>%
# LOAD into DB
dbSendQuery(conn, "delete from ns_space_groups_list;")
validate <- initial %>%
select(`Space group`, Note) %>%
filter(str_match(Note, 'standard'))
?str_match
# validate space_group_name
validate <- initial %>%
select(`Space group`, Note) %>%
filter(str_detect(Note, 'standard')) %>%
mutate(space_group_name=str_split(`Space group`, ',|;|, ')) %>%
unchop(space_group_name, keep_empty = TRUE) %>%
# LOAD into DB
dbSendQuery(conn, "delete from ns_space_groups_list;")
select(`Space group`, Note) %>%
filter(str_detect(Note, 'standard'))
validate <- initial %>%
select(`Space group`, Note) %>%
filter(str_detect(Note, 'standard'))
# validate space_group_name
validate <- initial %>%
select(`Space group`, Note) %>%
filter(str_detect(Note, 'standard')) %>%
mutate(space_group_name=str_split(`Space group`, ',|;|, ')) %>%
unchop(space_group_name, keep_empty = TRUE)
View(validate)
# validate space_group_name
validate <- initial %>%
select(`Space group`, Note) %>%
filter(str_detect(Note, 'standard')) %>%
mutate(space_group_name=str_split(`Space group`, ', |;|,')) %>%
unchop(space_group_name, keep_empty = TRUE)
View(validate)
# validate space_group_name
validate <- initial %>%
select(Mineral_Name,`Space group`, Note) %>%
filter(str_detect(Note, 'standard')) %>%
mutate(space_group_name=str_split(`Space group`, ', |;|,')) %>%
unchop(space_group_name, keep_empty = TRUE) %>%
# LOAD into DB
dbSendQuery(conn, "delete from ns_space_groups_list;")
# validate space_group_name
validate <- initial %>%
select(Mineral_Name,`Space group`, Note) %>%
filter(str_detect(Note, 'standard')) %>%
mutate(space_group_name=str_split(`Space group`, ', |;|,')) %>%
unchop(space_group_name, keep_empty = TRUE)
View(validate)
# validate space_group_name
validate <- initial %>%
select(Mineral_Name,`Space group`, Note) %>%
filter(str_detect(Note, 'standard')) %>%
mutate(ns_space_group_name=str_split(`Space group`, ', |;|,')) %>%
unchop(ns_space_group_name, keep_empty = TRUE) %>%
left_join(ns_space_groups_list, by='ns_space_group_name', copy=TRUE)
View(validate)
ns_space_groups_list <- tbl(conn, 'ns_space_groups_list')
# validate space_group_name
validate <- initial %>%
select(Mineral_Name,`Space group`, Note) %>%
filter(str_detect(Note, 'standard')) %>%
mutate(ns_space_group_name=str_split(`Space group`, ', |;|,')) %>%
unchop(ns_space_group_name, keep_empty = TRUE) %>%
left_join(ns_space_groups_list, by='ns_space_group_name', copy=TRUE)
ns_space_groups_list
ns_space_groups_list <- tbl(conn, 'ns_space_groups_list')
# validate space_group_name
validate <- initial %>%
select(Mineral_Name,`Space group`, Note) %>%
filter(str_detect(Note, 'standard')) %>%
mutate(ns_space_group_name=str_split(`Space group`, ', |;|,')) %>%
unchop(ns_space_group_name, keep_empty = TRUE) %>%
left_join(ns_space_groups_list, by='ns_space_group_name', copy=TRUE)
View(validate)
# validate space_group_name
validate <- initial %>%
select(Mineral_Name,`Space group`, Note) %>%
filter(str_detect(Note, 'standard')) %>%
mutate(ns_space_group_name=str_split(`Space group`, ', |;|,')) %>%
unchop(ns_space_group_name, keep_empty = TRUE) %>%
left_join(ns_space_groups_list, by='ns_space_group_name', copy=TRUE)
View(validate)
# validate space_group_name
validate <- initial %>%
select(Mineral_Name,`Space group`, Note) %>%
filter(str_detect(Note, 'standard')) %>%
mutate(ns_space_group_name=str_split(`Space group`, ', |;|,')) %>%
unchop(ns_space_group_name, keep_empty = TRUE) %>%
left_join(ns_space_groups_list, by='ns_space_group_name', copy=TRUE) %>%
filter(is.na(ns_space_group_id))
View(validate)
# validate space_group_name
validate <- initial %>%
select(Mineral_Name,`Space group`, Note) %>%
filter(str_detect(Note, 'standard')) %>%
mutate(ns_space_group_name=str_split(`Space group`, ', |;|,')) %>%
unchop(ns_space_group_name, keep_empty = TRUE) %>%
left_join(space_groups_list, by=c('space_group_name'='space_group_name'), copy=TRUE) %>%
filter(is.na(space_group_id))
# validate space_group_name
validate <- initial %>%
select(Mineral_Name,`Space group`, Note) %>%
filter(str_detect(Note, 'standard')) %>%
mutate(ns_space_group_name=str_split(`Space group`, ', |;|,')) %>%
unchop(ns_space_group_name, keep_empty = TRUE) %>%
left_join(space_groups_list, by=c('ns_space_group_name'='space_group_name'), copy=TRUE) %>%
filter(is.na(space_group_id))
View(ns_space_groups)
# validate space_group_name
validate <- initial %>%
select(Mineral_Name,`Space group`, Note) %>%
filter(str_detect(Note, 'standard')) %>%
mutate(ns_space_group_name=str_split(`Space group`, ', |;|,')) %>%
unchop(ns_space_group_name, keep_empty = TRUE) %>%
left_join(space_groups_list, by=c('ns_space_group_name'='space_group_name'), copy=TRUE) %>%
filter(is.na(space_group_id)) %>%
left_join(ns_space_groups_list, by='ns_space_group_name', copy=TRUE) %>%
filter(is.na(ns_space_group_id))
View(validate)
space_groups_list <- tbl(conn, 'space_groups_list')
ns_space_groups_list <- tbl(conn, 'ns_space_groups_list')
crystal_systems_list <- tbl(conn, 'crystal_systems_list')
crystal_classes_list <- tbl(conn, 'crystal_classes_list')
ms_species <- tbl(conn, 'ms_species')
# validate space_group_name
validate <- initial %>%
select(Mineral_Name,`Space group`, Note) %>%
filter(str_detect(Note, 'standard')) %>%
mutate(ns_space_group_name=str_split(`Space group`, ', |;|,')) %>%
unchop(ns_space_group_name, keep_empty = TRUE) %>%
left_join(space_groups_list, by=c('ns_space_group_name'='space_group_name'), copy=TRUE) %>%
filter(is.na(space_group_id)) %>%
left_join(ns_space_groups_list, by='ns_space_group_name', copy=TRUE) %>%
filter(is.na(ns_space_group_id))
View(validate)
# LOAD data ---------------------------------------------------------------------
initial <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Crystallography',
range = 'A:O',col_types = 'c',
col_names = TRUE,
)
# validate space_group_name
validate <- initial %>%
select(Mineral_Name,`Space group`, Note) %>%
filter(str_detect(Note, 'standard')) %>%
mutate(ns_space_group_name=str_split(`Space group`, ', |;|,')) %>%
unchop(ns_space_group_name, keep_empty = TRUE) %>%
left_join(space_groups_list, by=c('ns_space_group_name'='space_group_name'), copy=TRUE) %>%
filter(is.na(space_group_id)) %>%
left_join(ns_space_groups_list, by='ns_space_group_name', copy=TRUE) %>%
filter(is.na(ns_space_group_id))
View(validate)
# LOAD data ---------------------------------------------------------------------
initial <- googlesheets4::read_sheet(
ss='1QA-Y229WNurpJA7KYmpiU2jn-_YJmrUfLq_lv0VFpXg',
sheet = 'Crystallography',
range = 'A:O',col_types = 'c',
col_names = TRUE,
)
# validate space_group_name
validate <- initial %>%
select(Mineral_Name,`Space group`, Note) %>%
filter(str_detect(Note, 'standard')) %>%
mutate(ns_space_group_name=str_split(`Space group`, ', |;|,')) %>%
unchop(ns_space_group_name, keep_empty = TRUE) %>%
left_join(space_groups_list, by=c('ns_space_group_name'='space_group_name'), copy=TRUE) %>%
filter(is.na(space_group_id)) %>%
left_join(ns_space_groups_list, by='ns_space_group_name', copy=TRUE) %>%
filter(is.na(ns_space_group_id))
